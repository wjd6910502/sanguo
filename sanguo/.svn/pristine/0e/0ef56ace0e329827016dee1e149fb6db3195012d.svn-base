
#ifndef __GNET_CHANGEMAFIANAME_HPP
#define __GNET_CHANGEMAFIANAME_HPP

#include "localdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "changemafianamearg"
#include "changemafianameres"

namespace GNET
{

class ChangeMafiaName : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "changemafianame"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		ChangeMafiaNameArg *arg = (ChangeMafiaNameArg *)argument;
		ChangeMafiaNameRes *res = (ChangeMafiaNameRes *)result;
		
		Marshal::OctetsStream key,value;
		string find_key = std::string((char*)arg->name.begin(), arg->name.size());
		CREATE_TRANSACTION(txnobj, txnerr, txnlog)
		LOCK_TABLE(mafia_name)
		START_TRANSACTION
		{
			key << find_key;
			if(pmafia_name->find(key, value, txnobj))
			{
				res->retcode = 1;
			}
			else
			{
				pmafia_name->insert(key,Marshal::OctetsStream()<< 1,txnobj);
				res->retcode = 0;
			}
		}
		END_TRANSACTION
		
		if(txnerr)
		{
		        //Log::log(LOG_ERR, "ChangeMafiaName: name=%.*s", arg->name.size(), (char*)arg->name.begin());
		        res->retcode = -1;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// ChangeMafiaNameArg *arg = (ChangeMafiaNameArg *)argument;
		// ChangeMafiaNameRes *res = (ChangeMafiaNameRes *)result;
	}

	void OnTimeout(Rpc::Data *argument)
	{
	}

};

};
#endif
