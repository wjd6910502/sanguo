function OnCommand_TowerGetLayerInfo(player, role, arg, others)
	player:Log("OnCommand_TowerGetLayerInfo, "..DumpTable(arg).." "..DumpTable(others))
	
	local resp = NewCommand("TowerGetLayerInfo_Re")
	if arg.layer ~= role._roledata._tower_data._cur_layer then --算是数据一致性校验
		resp.retcode = G_ERRCODE["TOWER_ERROR_ARG"]
		player:SendToClient(SerializeCommand(resp))
		return
	end

	resp.layer = role._roledata._tower_data._cur_layer
	local ed = DataPool_Find("elementdata")
	local layer = resp.layer
	if role._roledata._tower_data._difficulty == 2 then
		layer = layer + 100 
	end
	local towerstage = ed:FindBy("tower_stage", layer)
	if towerstage == nil then
		resp.retcode = G_ERRCODE["TOWER_ERROR_DATA"]
		player:SendToClient(SerializeCommand(resp))
		return 
	end
	
	if towerstage.stage_category == 1 then --打怪
		resp.army_difficulty = role._roledata._tower_data._select_layer_difficulty
		local army = {}
		local army_info = role._roledata._tower_data._cur_attack_army_info
		local lit = army_info:SeekToBegin()
		local l = lit:GetValue()
		while l ~= nil do
			army.id =  l._id
			army.hp =  l._hp
			army.anger = l._anger
			resp.cur_army[#resp.cur_army+1] = army
			lit:Next()
			l = lit:GetValue()
		end
	elseif towerstage.stage_category == 2 then
		local buffs = role._roledata._tower_data._buff_info:Find(arg.layer)
		if buffs == nil then
			local buff_ids = {}
			local size = table.getn(towerstage.buffs3)
			local max = 0 
			for i = 1, size do
				max = max + towerstage.buffs3_odds[i]
			end
			local randd = math.random(1, max)
			local add = 0
			for i = 1, size do
				add = add + towerstage.buffs3_odds[i]
				if randd <= add then
					buff_ids[1] = towerstage.buffs3[i]
					break
				end
			end
			
			size = table.getn(towerstage.buffs15)
			max = 0
			for i = 1, size do
				max = max + towerstage.buffs15_odds[i]
			end
			randd = math.random(1, max)
			add = 0
			for i = 1, size do
				add = add + towerstage.buffs15_odds[i]
				if randd <= add then
					buff_ids[2] = towerstage.buffs15[i]
					break
				end
			end 
			
			size = table.getn(towerstage.buffs30)
			max = 0 
			for i = 1, size do
				max = max + towerstage.buffs30_odds[i]
			end 
			randd = math.random(1, max)
			add = 0 
			for i = 1, size do
				add = add + towerstage.buffs30_odds[i]
				if randd <= add then
					buff_ids[3] = towerstage.buffs30[i]
					break
				end 
			end

			local tmp = CACHE.TowerBuyBuffInfo()
			tmp._layer = role._roledata._tower_data._cur_layer
			size  = table.getn(buff_ids)
			for i = 1, size do
				local tmp1 = CACHE.TowerBuffInfo()
				tmp1._id = buff_ids[i]
				tmp._buff:PushBack(tmp1)
			end
			role._roledata._tower_data._buff_info:Insert(tmp._layer, tmp)
			resp.buff_list = buff_ids
		else
			if buffs ~= nil then
				local lit = buffs:SeekToBegin() --list遍历
				local l = lit:GetValue()
				while l~= nil do
					resp.buff_list[#resp.buff_list + 1] = l._id
					lit:Next()
					l = lit:GetValue()
				end
			end
		end
	end

	resp.retcode = G_ERRCODE["SUCCESS"]
	resp.typ = towerstage.stage_category
	player:SendToClient(SerializeCommand(resp))
end
