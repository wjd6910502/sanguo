
--这个函数就是尝试添加，不一定添加成功，因为条件可能不满足
function TASK_AddTask(role, tid)
end

--这个函数是用来处理日常成就的，比如把日常成就从当前已经完成的，以及当前的成就删除
function TASK_RefreshDailyTask(role)
	local current_task = role._task._current_task
	local finish_task = role._task._finish_task
	local ed = DataPool_Find("elementdata")
	--首先处理当前成就
	local current = {}
	local tit = current_task:SeekToBegin()
	local t = tit:GetValue()
	while t ~= nil do
		local ele_task = ed:FindBy("task_id", t._task_id)
		if ele_task ~= nil then
			if ele_task.isdaily == 1 then
				current[#current+1] = t._task_id
			end
		end
		tit:Next()
		t = tit:GetValue()
	end
	--开始遍历删除
	local count = table.getn(current)
	for i = 1, count do
		current_task:Delete(current[i])
	end
	
	--首先处理已经完成的成就
	local finish = {}
	tit = finish_task:SeekToBegin()
	t = tit:GetValue()
	while t ~= nil do
		local ele_task = ed:FindBy("task_id", t._task_id)
		if ele_task ~= nil then
			if ele_task.isdaily == 1 then
				finish[#current+1] = t._task_id
			end
		end
		tit:Next()
		t = tit:GetValue()
	end
	--开始遍历删除
	count = table.getn(finish)
	for i = 1, count do
		finish_task:Delete(current[i])
	end
end

--这个函数就是用来添加当前成就的，查看现在是否可以把一些新的成就添加进去
function TASK_RefreshTask(role)
	--等级，前置任务，自己这个任务是否完成
	local current_task = role._task._current_task
	local finish_task = role._task._finish_task
	local ed = DataPool_Find("elementdata")
	local tasks = ed.achievement
	for ach in DataPool_Array(tasks) do
		if ach.before ~= 0 then
			--前置任务没有完成
			local find = finish_task:Find(ach.before)
			if find == nil then
				break
			end
		end

		--这个任务已经完成了
		local find = finish_task:Find(ach.achievementid)
		if find ~= nil then
			break
		end
		--这个任务已经在当前任务中了
		find = current_task:Find(ach.achievementid)
		if find ~= nil then
			break
		end
		--等级不符合
		if role._status._level < ach.level then 
			break
		end

		--时间先不进行判断
		
	
		--可以把这个成就添加到当前成就中了
		local tmp = CACHE.Task:new()
		tmp._task_id = ach.achievementid

		local task_data = CACHE.TaskData:new()
		task_data._type = ach.achtype
		task_data._condition = ach.condition
		task_data._num = 0
		task_data._maxnum = ach.maxnum
		API_Log("ach.achtype="..ach.achtype.."   ach.condition="..ach.condition.."   ach.maxnum="..ach.maxnum)
		tmp._task_condition:PushBack(task_data)
		
		current_task:Insert(ach.achievementid, tmp)
	end
end

function TASK_ChangeCondition(role, task_type, task_condition, num)
	local task = role._task._current_task
	local tit = task:SeekToBegin()
	local t = tit:GetValue()
	--循环当前的所有成就
	while t ~= nil do
		local condition = t._task_condition
		local cit = condition:SeekToBegin()
		local c = cit:GetValue()
		local flag = 0
		while c ~= nil do
			API_Log("c._type="..c._type.."    task_type="..task_type.."    c._condition="..c._condition.."     task_condition="..task_condition)
			if c._type == task_type and c._condition == task_condition then
				if c._num < c._maxnum then
					c._num = c._num + num
					if c._num > c._maxnum then
						c._num = c._maxnum
					end
					flag = 1
				end
			end
			cit:Next()
			c = cit:GetValue()
		end
		if flag == 1 then
			--在这里会给客户端发送条件已经修改的数据
			local resp = NewCommand("Task_Condition")
			resp.tid = t._task_id
			resp.condition = {}
			local tmp = {}
			cit = condition:SeekToBegin()
			c = cit:GetValue()
			while c ~= nil do
				tmp.current = c._num
				tmp.max = c._maxnum
				resp.condition[#resp.condition+1] = tmp
				cit:Next()
				c = cit:GetValue()
			end
			role:SendToClient(SerializeCommand(resp))
		end
		tit:Next()
		t = tit:GetValue()
	end
end
