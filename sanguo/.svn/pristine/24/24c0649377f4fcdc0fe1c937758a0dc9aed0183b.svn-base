function OnCommand_Lottery(player, role, arg, others)
	player:Log("OnCommand_Lottery, "..DumpTable(arg).." "..DumpTable(others))
	
	local resp = NewCommand("Lottery_Re")
	resp.retcode = G_ERRCODE["SUCCESS"]
	resp.lottery_id = arg.lottery_id
	
	--查找抽奖id
	local ed = DataPool_Find("elementdata")
	local lottery = ed:FindBy("lottery_id",arg.lottery_id)
	
	if lottery == nil then
		resp.retcode = G_ERRCODE["NO_LOTTERY"] 
		player:SendToClient(SerializeCommand(resp))
		return
	end

	local cost_type = arg.cost_type	
	local price = 0
	local drop_id = 0
	local lottery_cnt = 0
	for costdrop in DataPool_Array(lottery.costdrop) do	
		
		if costdrop.lottery_cost_type == cost_type or cost_type < 0 then			
			price = costdrop.lottery_price
			drop_id = costdrop.drop_id
			lottery_cnt = costdrop.lottery_times
		end			
	end

	--free 抽奖 -1  -2  -7
	if cost_type < 0 then 			
		lottery_cnt = 1
		--计算时间 然后获取更新时间 --更新刷新时间
		--	local map = role._roledata._status.
		--if cost_type == -1 then 
		--	role._roledata._status._lott	
			
		--elseif cost_type == -2 then
			
			
		--elseif cost_type == -7 then
			

		--end
	end
			
	--这里如果考虑先扣钱 要考虑回滚 如果后扣钱 还要考虑效率(不用考虑)
	local lottery_info = {}
	local i = 1
	while lottery_cnt > 0 do
		
		--根据掉落表配置每次只会随即掉落一个物品
		local item = DROPITEM_DropItem(role, drop_id)
		if item == nil then
			throw()						
		end

		local item_count = table.getn(Item)	
		if item_count ~= 1 then
			throw()
		end
		
		local tmp_item = {}
		tmp_item.id = item[1].id
		tmp_item.cnt = item[1].count
		
		--找武将 是否首次获取看背包有没有 为空代表是物品
		local hero = ed:FindBy("hero_id",tmp_item.id)
		if hero ~= nil then
			HERO_AddHero(role, tmp_item.id)	
			tmp_item.bproorhreo = 1
		
			--找一下是否首次获得
			local heroid =  tmp_item.id 
			local hero_map = role._roledata._hero_hall._heros
			local h = hero_map:Find(heroid)
			if h ~= nil then
				--转换成武魂物品
				tmp_item.firstget = 0
			else
				--第一次获取
				tmp_item.firstget = 1 	
			end
		else
			BACKPACK_AddItem(role,tmp_item.id,tmp_item.cnt)	
			tmp_item.bproorhreo = 0		
			tmp_item.firstget = 0
		end

		resp.reward_ids[i].id = tmp_item.id 
		resp.reward_ids[i].num = tmp_item.count	
		resp.reward_ids[i].firstget = tmp_item.firstget
		resp.reward_ids[i].bproorhreo = tmp_item.bproorhreo

		i = i + 1
		lottery_cnt = lottery_cnt - 1		
	end
	
	--1代表的是铜币购买，2代表的是元宝购买, 7代表的是
	if cost_type == 1 then
		if role._roledata._status._money < price then
			resp.retcode = G_ERRCODE["LOTTERY_MONEY_NOTENOUGH"] 
			player:SendToClient(SerializeCommand(resp))
			return
		end
		ROLE_SubMoney(role, need_money)
	elseif cost_type == 2 then
		if role._roledata._status._yuanbao < price then
			resp.retcode = G_ERRCODE["LOTTERY_YUANBAO_NOTENOUGH"] 
			player:SendToClient(SerializeCommand(resp))
			return
		end
		ROLE_SubYuanBao(role, need_yuanbao)
	elseif arg.typ == 7 then
		--这里需要问策划
		
		--BACKPACK_DelItem(role, hero.soulID, need_soul)
		--ROLE_SubSoul(role, hero.soulID, need_soul)
	else
		resp.retcode = G_ERRCODE["LOTTERY_COSTTYPE_NOTKNOWN"]
		player:SendToClient(SerializeCommand(resp))
		return
	end

	--发送物品给客户端
	player:SendToClient(SerializeCommand(resp)) 		
end




