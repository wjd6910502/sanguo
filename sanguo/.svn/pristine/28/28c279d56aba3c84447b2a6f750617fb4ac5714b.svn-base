	public:
		int index;
		std::vector<Octets> protocols;
		int index_ack;
		unsigned short client_send_time;
		unsigned short server_send_time;
		int signature;
		int reserved1;
		int reserved2;
		enum { PROTOCOL_TYPE = PROTOCOL_UDPS2CGAMEPROTOCOLS };
	public:
		UDPS2CGameProtocols() { type = PROTOCOL_UDPS2CGAMEPROTOCOLS; }
		UDPS2CGameProtocols(void*) : Protocol(PROTOCOL_UDPS2CGAMEPROTOCOLS) { }
		UDPS2CGameProtocols (int l_index,const std::vector<Octets>& l_protocols,int l_index_ack,
			unsigned short l_client_send_time,unsigned short l_server_send_time,int l_signature,
			int l_reserved1 = 0,int l_reserved2 = 0)
			 : index(l_index),protocols(l_protocols),index_ack(l_index_ack)
			,client_send_time(l_client_send_time),server_send_time(l_server_send_time),signature(l_signature)
			,reserved1(l_reserved1),reserved2(l_reserved2)
		{
			type = PROTOCOL_UDPS2CGAMEPROTOCOLS;
		}

		UDPS2CGameProtocols(const UDPS2CGameProtocols &rhs)
			: Protocol(rhs),index(rhs.index),protocols(rhs.protocols),index_ack(rhs.index_ack)
			,client_send_time(rhs.client_send_time),server_send_time(rhs.server_send_time),signature(rhs.signature)
			,reserved1(rhs.reserved1),reserved2(rhs.reserved2) { }

		GNET::Protocol *Clone() const { return new UDPS2CGameProtocols(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << index;
			os << protocols;
			os << index_ack;
			os << client_send_time;
			os << server_send_time;
			os << signature;
			os << reserved1;
			os << reserved2;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> index;
			os >> protocols;
			os >> index_ack;
			os >> client_send_time;
			os >> server_send_time;
			os >> signature;
			os >> reserved1;
			os >> reserved2;
			return os;
		}

		bool SizePolicy(size_t size) const { return size <= 10240; }
