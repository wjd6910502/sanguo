function OnCommand_MilitarySweep(player, role, arg, others)
	player:Log("OnCommand_MilitarySweep, "..DumpTable(arg).." "..DumpTable(others))

	local resp = NewCommand("MilitarySweep_Re")
	resp.stage_id = arg.stage_id
	resp.exp = 0

	local ed = DataPool_Find("elementdata")
	local vip_data = ed:FindBy("vip_level", ROLE_GetVIP(role))
	if vip_data == nil then
		resp.retcode = G_ERRCODE["MILITARY_ERROR_DATA"]
		player:SendToClient(SerializeCommand(resp))
		player:Log("OnCommand_MilitarySweep, error=MILITARY_ERROR_DATA")
		return
	end

	if vip_data.dailybenefits_sweep_switch == 0 then
		resp.retcode = G_ERRCODE["MILITARY_ERROR_VIP"]
		player:SendToClient(SerializeCommand(resp))
		player:Log("OnCommand_MilitarySweep, error=MILITARY_ERROR_VIP")
		return
	end

	local military = ed:FindBy("military", arg.stage_id)

	if military == nil then
		resp.retcode = G_ERRCODE["MILITARY_ERROR_ARG"]
		player:SendToClient(SerializeCommand(resp))
		player:Log("OnCommand_MilitarySweep, error=MILITARY_ERROR_ARG")
		return
	end

	if role._roledata._status._yuanbao < military.sweep_cost then
		resp.retcode = G_ERRCODE["YUANBAO_LESS"]
		role:SendToClient(SerializeCommand(resp))
		player:Log("OnCommand_MilitarySweep, error=YUANBAO_LESS")
		return
	end

	local now = API_GetTime()
	local date = os.date("*t", now)
	if military.open_day[date.wday+1] == 0 then
		resp.retcode = G_ERRCODE["MILITARY_ERROR_ACTIVIE"]
		player:SendToClient(SerializeCommand(resp))
		player:Log("OnCommand_MilitarySweep, error=MILITARY_ERROR_ACTIVIE")
		return
	end

	if role._roledata._status._level < military.dificulty_level then
		resp.retcode = G_ERRCODE["MILITARY_ERROR_LEVEL"]
		player:SendToClient(SerializeCommand(resp))
		player:Log("OnCommand_MilitarySweep, error=MILITARY_ERROR_LEVEL")
		return
	end

	local info = role._roledata._military_data._stage_data:Find(arg.stage_id)
	local times = military.daily_limit
	if info ~= nil then
		if info._cd > now then
			resp.retcode = G_ERRCODE["MILITARY_ERROR_CD"]
			player:SendToClient(SerializeCommand(resp))
			player:Log("OnCommand_MilitarySweep, error=MILITARY_ERROR_CD")
			return
		end

		--已经战斗次数
		if info._times >= military.daily_limit then
			resp.retcode = G_ERRCODE["MILITARY_ERROR_TIMES"]
			player:SendToClient(SerializeCommand(resp))
			player:Log("OnCommand_MilitarySweep, error=MILITARY_ERROR_TIMES")
			return
		end
		times = military.daily_limit - info._times
	end

	--计算能扫荡的最大难度
	local index = 0
	for data in DataPool_Array(military.nandu_set) do
		if data.nandu_dificulty_level > role._roledata._status._level then
			break
		end
		index = index + 1
	end

	if index < 1 then
		resp.retcode = G_ERRCODE["MILITARY_ERROR_DATA"]
		player:SendToClient(SerializeCommand(resp))
		player:Log("OnCommand_MilitaryJoinBattle, error=MILITARY_ERROR_DATA")
		return
	end

	ROLE_SubYuanBao(role, military.sweep_cost)

	local reward_id = military.nandu_set[index].nandu_reward_id
	resp.item = {}
	local now = API_GetTime()
	local Reward = DROPITEM_Reward(role, reward_id)
	local item_count = table.getn(Reward.item)
	local quanju = ed.gamedefine[1]
	local vip_data = ed:FindBy("vip_level", ROLE_GetVIP(role))

	
	if arg.stage_id == 3 then
		local all_reward = {}
		local result_reward = {}
		result_reward.exp = 0 
		result_reward.heroexp = 0 
		result_reward.item = {}  
	
		for t = 1, times do
			for i = 1, item_count do
				local item_data = ed:FindBy("item_id", Reward.item[i].itemid)
				if item_data == nil then
					resp.retcode = G_ERRCODE["MILITARY_ERROR_BATTLE_DATA"]
					player:SendToClient(SerializeCommand(resp))
					return
				end

				local drop = ed:FindBy("drop_id", item_data.type_data1)
 				if drop == nil then
					resp.retcode = G_ERRCODE["MILITARY_ERROR_BATTLE_DATA"]
					player:SendToClient(SerializeCommand(resp))
					return
				end

				for j = 1, Reward.item[i].itemnum do
					local reward = DROPITEM_DropItem(role, item_data.type_data1)
					for k = 1, #reward do
						if all_reward[reward[k].id] == nil then
							all_reward[reward[k].id] = 0 
						end
						all_reward[reward[k].id] = all_reward[reward[k].id] + reward[k].count
					end
				end
			end
		end

		for key, value in pairs(all_reward) do
			local reward_info = {}
			local res_item = {}
			reward_info.itemid = key 
			reward_info.itemnum = value

			if role._roledata._status._little_fudai > now then
				reward_info.itemnum = math.ceil(reward_info.itemnum*(quanju.dailybenefits_bonus_monthcard_1+100)/100)
			end

			if role._roledata._status._big_fudai > now then
				reward_info.itemnum = math.ceil(reward_info.itemnum*(quanju.dailybenefits_bonus_monthcard_2+100)/100)
			end 

 			res_item.tid = key 
			res_item.count = reward_info.itemnum

			resp.item[#resp.item+1] = res_item
			result_reward.item[#result_reward.item+1] = reward_info
		end
        ROLE_AddReward(role, result_reward, 0)    
	else
		for i = 1, item_count do
			local reward_info = {}
			reward_info.tid = Reward.item[i].itemid

			if role._roledata._status._little_fudai > now then
				Reward.item[i].itemnum = math.ceil(Reward.item[i].itemnum*(quanju.dailybenefits_bonus_monthcard_1+100)/100)
			end
			if role._roledata._status._big_fudai > now then
				Reward.item[i].itemnum = math.ceil(Reward.item[i].itemnum*(quanju.dailybenefits_bonus_monthcard_2+100)/100)
			end

			Reward.item[i].itemnum = math.ceil(Reward.item[i].itemnum*(vip_data.dailybenefits_bonus+100)/100)*times
			reward_info.count = Reward.item[i].itemnum
			resp.item[#resp.item+1] = reward_info
		end

		if arg.stage_id == 4 then
			if role._roledata._status._little_fudai > now then
				Reward.exp = math.ceil(Reward.exp*(quanju.dailybenefits_bonus_monthcard_1+100)/100)
			end

			if role._roledata._status._big_fudai > now then
				Reward.exp = math.ceil(Reward.exp*(quanju.dailybenefits_bonus_monthcard_2+100)/100)	
			end
			Reward.exp = Reward.exp*times
		end
		resp.exp = Reward.exp
		ROLE_AddReward(role, Reward, 0)
	end

	if info == nil then
		local data = CACHE.MilitaryStageData()
		data._id = arg.stage_id
		data._cd = 0
		data._times = military.daily_limit
		role._roledata._military_data._stage_data:Insert(arg.stage_id, data)
	else
		info._cd = 0
		info._times = military.daily_limit
	end	

	resp.retcode = G_ERRCODE["SUCCESS"]
	resp.times = military.daily_limit
	resp.cd = 0
	player:SendToClient(SerializeCommand(resp))
	return
end
