
8.26:
	试了试pvp vs robot的情况
	用mi4
	mi4(perf)
		11cacfce9e6868324f05cffac2115dd9
		mi 42+low, no extra delay, 3v3, op, 5 min, 外服
		延迟很小, 但比较卡
			----------------------- 1015
			----------------------- tmp.1015.1
			84
			83
			9270
			191
			9079
			302.695 44.16657031
			----------------------- tmp.1015.2
			124
			123
			10477
			209
			10268
			342.45 44.5583296832
		问题在于几乎没有dump/load/forcast, 为什么还这么卡？同样武将的pve就好太多了

		改成mi vs note:
			----------------------- tmp.1015.5
			179
			178
			5426
			297
			5129
			171.198 39.7376137572
		还卡，好奇怪

		no op
			----------------------- tmp.1015.6
			30
			29
			4323
			60
			4263
			142.184 46.1655319867
			----------------------- tmp.1015.7
			25
			24
			4316
			52
			4264
			142.266 45.9139920993
			----------------------- tmp.1015.8
			27
			26
			4307
			43
			4264
			142.334 49.2573805275
			----------------------- tmp.1015.9
			28
			27
			4308
			44
			4264
			142.134 46.9416184727
			----------------------- tmp.1015.10
			18
			17
			4305
			41
			4264
			142.248 47.0867780215
			----------------------- tmp.1015.11
			15
			14
			4306
			43
			4263
			142.265 46.3501212526

		no op, 且修改代码，杜绝load/dump
			----------------------- tmp.1015.12
			0
			0
			4301
			0
			4301
			143.345 42.0733196135
			----------------------- tmp.1015.13
			0
			0
			4360
			0
			4360
			145.404 40.9754889824
			----------------------- tmp.1015.14
			0
			0
			4446
			0
			4446
			148.277 40.5862001524

		还卡，只可能几个原因了：
			1, version table读写效率低
			2, 网络代码效率低，回头把UDP网络关掉再试
			3, 特效？

		做对比分析:
			mi+perform
			3v3: 孙策+大乔+赵云 vs 关于+张飞+黄忠

			1, full+noop+nover+nonet	+
			2, full+noop+nover		+net				-4fps	-1fps
			3, full+noop+nonet		+ver				-11fps	-8fps
			4, full+noop			+net+ver			-16fps	-6fps
			5, full				+net+ver+rollback		-NAfps	-16fps

			----------------------- tmp.1015.23(1)
			0
			0
			4266
			0
			4266
			142.126 50.3567257222
			----------------------- tmp.1015.24(2)
			0
			0
			4531
			0
			4531
			150.989 46.3941081801
			----------------------- tmp.1015.25(3)
			0
			0
			4264
			0
			4264
			140.953 39.4670563947
			----------------------- tmp.1015.26(4)
			0
			0
			4353
			0
			4353
			145.11 34.3877058783
			----------------------- tmp.1015.27(5,bug)

			----------------------- tmp.1015.28(1)
			0
			0
			4792
			0
			4792
			159.697 48.1975240612
			----------------------- tmp.1015.29(2)
			0
			0
			4304
			0
			4304
			143.449 47.480289162
			----------------------- tmp.1015.30(3)
			0
			0
			4852
			0
			4852
			161.645 40.0631012404
			----------------------- tmp.1015.31(4)
			0
			0
			4561
			0
			4561
			150.918 42.21497767
			----------------------- tmp.1015.32(1)
			0
			0
			4625
			0
			4625
			154.09 47.4203387631
			----------------------- tmp.1015.33(5)
			130
			129
			4406
			186
			4220
			140.764 32.6077690319
			----------------------- tmp.1015.34(5)
			106
			105
			4414
			194
			4220
			140.756 32.858279576
			
		version table的读写效率偏低，可以看看能否优化

		试试各种方式(no jit)
			3rd/luaperf svn ver 1838
			1, normal
			[duxiaogang@localhost luaperf]$ time ./test
			10000000
			real    0m1.074s
			user    0m1.070s
			sys     0m0.001s
			
			2, lua mt
			[duxiaogang@localhost luaperf]$ time ./test
			10000000
			real    0m1.749s
			user    0m1.744s
			sys     0m0.001s
			
			3, c mt
			[duxiaogang@localhost luaperf]$ time ./test
			10000000
			real    0m1.581s
			user    0m1.575s
			sys     0m0.003s
			
			4, userdata
			[duxiaogang@localhost luaperf]$ time ./test
			10000000
			real    0m1.451s
			user    0m1.448s
			sys     0m0.001s
			
			5, version table
			[duxiaogang@localhost luaperf]$ time ./test
			10000000
			real    0m3.777s
			user    0m3.768s
			sys     0m0.001s

		为什么lua自身table比userdata快好多？

		再试试jit:
			3rd/luaperf svn ver 1839
			1, normal
			[duxiaogang@localhost luaperf]$ time ./test 
			10000000
			real    0m0.037s
			user    0m0.034s
			sys     0m0.002s
			
			2, lua mt
			[duxiaogang@localhost luaperf]$ time ./test 
			10000000
			real    0m0.037s
			user    0m0.035s
			sys     0m0.002s
			
			3, c mt
			[duxiaogang@localhost luaperf]$ time ./test 
			10000000
			real    0m1.637s
			user    0m1.633s
			sys     0m0.002s
			
			4, userdata
			[duxiaogang@localhost luaperf]$ time ./test 
			10000000
			real    0m1.353s
			user    0m1.348s
			sys     0m0.002s
			
			5, version table
			[duxiaogang@localhost luaperf]$ time ./test 
			10000000
			real    0m0.039s
			user    0m0.036s
			sys     0m0.002s
			
		客户端应该是开启了jit的，那为何会有差别？怎么判断jit是否生效？

		再次确认：
			b572748e546e68dfcb9fc7e88393d456
			1, full+noop+nover+nonet	+
			2, full+noop+nonet		+ver				~-8fps

			----------------------- tmp.1015.1
			0
			0
			5015
			0
			5015
			167.138 50.6228386124
			----------------------- tmp.1015.2
			0
			0
			4339
			0
			4339
			144.59 41.4551490421
			----------------------- tmp.1015.3
			0
			0
			4341
			0
			4341
			144.669 52.6373998576
			----------------------- tmp.1015.4
			0
			0
			4498
			0
			4498
			149.943 42.0893272777
			----------------------- tmp.1015.5
			0
			0
			4323
			0
			4323
			144.063 47.4722864302
			----------------------- tmp.1015.6
			0
			0
			4727
			0
			4727
			157.481 41.3065703164
			----------------------- tmp.1015.7
			0
			0
			4441
			0
			4441
			147.968 49.6729022491
			----------------------- tmp.1015.8
			0
			0
			4645
			0
			4645
			154.774 46.4289867807
			----------------------- tmp.1015.9
			0
			0
			4296
			0
			4296
			143.239 50.6565949218
			----------------------- tmp.1015.10
			0
			0
			4569
			0
			4569
			152.204 41.8714357047
			----------------------- tmp.1015.11
			0
			0
			4485
			0
			4485
			149.417 48.3345268611
			----------------------- tmp.1015.12
			0
			0
			4617
			0
			4617
			153.908 39.0168152403


		试试c++开关luajit：
			2735bc270eb82bc88ec2d20af94ffc4b
			1, full+off
			2, full+on
			3, full
		
			----------------------- tmp.1005.1(1)
			40
			39
			4297
			77
			4220
			140.806 47.9098902035
			----------------------- tmp.1005.2(2)
			101
			100
			4392
			172
			4220
			140.647 34.2844141716
			----------------------- tmp.1005.3(3)
			112
			111
			4390
			170
			4220
			140.655 33.1733674594
			----------------------- tmp.1005.4(1)
			42
			41
			4316
			96
			4220
			140.684 46.5937846521
			----------------------- tmp.1005.5(2)
			28
			27
			4300
			80
			4220
			140.762 43.4705389239
			----------------------- tmp.1005.6(3)
			66
			65
			4364
			144
			4220
			140.726 39.2109489362
			----------------------- tmp.1005.7(1)
			85
			84
			4392
			172
			4220
			140.743 41.5935428405
			----------------------- tmp.1005.8(2)
			133
			132
			4407
			187
			4220
			140.67 31.8475865501
			----------------------- tmp.1005.9(3)
			34
			33
			4267
			47
			4220
			140.629 44.251185744

		这个统计太蛋疼了，off竟然最好


		排除网络等因素，试试
			1, full+noop+nonet+nover+off
			----------------------- tmp.1005.10
			0
			0
			4264
			0
			4264
			142.061 49.5913727202
			----------------------- tmp.1005.11
			0
			0
			4360
			0
			4360
			145.416 48.8323155636
			----------------------- tmp.1005.12
			0
			0
			4258
			0
			4258
			142.039 47.9868205211
			----------------------- tmp.1005.13
			0
			0
			4503
			0
			4503
			150.193 46.2471619849
			----------------------- tmp.1005.14
			0
			0
			4262
			0
			4262
			142.077 45.6513017589
			----------------------- tmp.1005.15
			0
			0
			10191
			0
			10191
			339.717 43.4214360777
			----------------------- tmp.1005.21
			0
			0
			4526
			0
			4526
			150.891 41.0296174059
			----------------------- tmp.1005.22
			0
			0
			4274
			0
			4274
			142.568 40.2544750575

			2, full+noop+nonet+off
			----------------------- tmp.1005.16
			0
			0
			4261
			0
			4261
			142.0 48.2816901408
			----------------------- tmp.1005.17
			0
			0
			4250
			0
			4250
			141.771 46.9842210325
			----------------------- tmp.1005.18
			0
			0
			4784
			0
			4784
			159.558 45.5821707467
			----------------------- tmp.1005.19
			0
			0
			4257
			0
			4257
			142.004 45.5057604011
			----------------------- tmp.1005.20
			0
			0
			4270
			0
			4270
			142.434 44.7505511325


luaL_dostring(L,"local count=0; for i=1,1000000 do count=count+1 end; print(count)")
	1000000: 8000ms+
	10000: 90ms+

luaL_dostring(L,"local count=0; for i=1,1000000 do count=count+1.1 end; print(count)")
	1000000:			10000ms+
	1000000+off:			70ms+               ???!!!
	1000000+armeabi-v7a:		8000ms+
	1000000+armeabi-v7a+off:	55ms+
	100000000+armeabi-v7a+off:	6300ms+
		pc+jit(Intel(R) Xeon(R) CPU E5-2603 0 @ 1.80GHz):	250ms+
		pc(Intel(R) Xeon(R) CPU E5-2603 0 @ 1.80GHz):		1900ms+

	现在，我只需要知道off是什么

	my:	180ms+
	sg:	2700ms+
	my.52:	180ms+

	参考:
	my.off:	3400ms+
	sg.off:	5800ms+


full+noop+nonet+off
----------------------- tmp.1029.1
0
0
4212
0
4212
140.404 47.8049058431
----------------------- tmp.1029.2
0
0
4204
0
4204
140.206 47.5657247193
----------------------- tmp.1029.3
0
0
4195
0
4195
139.882 47.561516135
----------------------- tmp.1029.4
0
0
5072
0
5072
169.021 47.5148058525
----------------------- tmp.1029.5
0
0
4630
0
4630
154.432 46.687215085
----------------------- tmp.1029.6
0
0
4187
0
4187
139.644 45.7090888259



low+off
----------------------- tmp.1029.8
25
24
4209
48
4161
138.842 51.2308955503
----------------------- tmp.1029.9
17
16
4193
32
4161
138.892 51.8172392938
----------------------- tmp.1029.10
20
19
4199
39
4160
138.824 51.6697401026



在找到luajit bug解决方案前，off成为标配了















