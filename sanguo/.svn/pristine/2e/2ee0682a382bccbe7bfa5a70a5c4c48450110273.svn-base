#ifndef _PVP_MANAGER_H_
#define _PVP_MANAGER_H_

#include <string>
#include <map>

#include "forlua.h"
#include "structs.h"
#include "thread.h"
#include "mutex.h"
#include "transaction.h"
#include "message.h"
#include "glog.h"
#include "commonmacro.h"

using namespace GNET;

namespace CACHE
{

class PVP: public GNET::Marshal, public TransactionBase
{
public:
	PVPData _data;

	PVP(int id, int mode, const Int64& fighter1, const Int64& fighter2): _in_transaction(false)
	{
		_data._id = id;
		_data._mode = mode;
		_data._status_change_time = Now();
		_data._fighter1._id = fighter1;
		_data._fighter2._id = fighter2;
	}

	virtual OctetsStream& marshal(OctetsStream &os) const
	{
		os << _data;
		return os;
	}
	virtual const OctetsStream& unmarshal(const OctetsStream &os)
	{
		os >> _data;
		return os;
	}

public:
	mutable Thread::Mutex _lock;

	//transaction
	bool _in_transaction;
	GNET::Octets _transaction_data;

	virtual void BeginTransaction();
	virtual void CommitTransaction();
	virtual void CancelTransaction();

	void OnTimer(int tick, int now);
	void OnTimer1s(time_t now);
};

class PVPManager
{
	int _id_stub;
	std::map<int, PVP*> _map;
	std::set<int> _will_delete_list;

	mutable Thread::Mutex _lock;

	PVPManager(): _id_stub(0) {}

public:
	static PVPManager& GetInstance()
	{
		static PVPManager _instance;
		return _instance;
	}

	void OnTimer(int tick, int now);

	PVP* Find(int id);

	int LUA_Create(int mode, const Int64& fighter1, const Int64& fighter2);
	void LUA_Delete(int id);
};

}

inline int API_PVP_Create(int mode, const CACHE::Int64& fighter1, const CACHE::Int64& fighter2)
{
	return CACHE::PVPManager::GetInstance().LUA_Create(mode, fighter1, fighter2);
}
inline void API_PVP_Delete(int id) { CACHE::PVPManager::GetInstance().LUA_Delete(id); }
inline CACHE::PVP* API_GetLuaPVP(void *r) { return (CACHE::PVP*)r; }

#endif //_PVP_MANAGER_H_

