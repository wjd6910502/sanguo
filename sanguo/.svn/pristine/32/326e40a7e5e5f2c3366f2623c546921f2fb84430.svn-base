$#include "playermanager.h"
$#include "mafiamanager.h"
$#include "pvpmanager.h"
$#include "dbsavemanager.h"
$#include "TopList.h"
$#include "Misc.h"
$#include "PveArena.h"

$#include "forlua.h"
$#include "structs.h"

$using namespace CACHE;

namespace CACHE
{

class Int64
{
	Int64(): _v(0), _s("0") {}
	Int64(const char *s);

	const char* ToStr() const { return _s.c_str(); }

	void Set(const char *s);
	void Set(const int &s);
	void Set(const Int64 &s);
	
	void Add(const char *s);
	void Add(const int &s);
	void Add(const Int64 &s);
	
	void Sub(const char *s);
	void Sub(const int &s);
	void Sub(const Int64 &s);
	
	void Mul(const char *s);
	void Mul(const int &s);
	void Mul(const Int64 &s);
	
	void Div(const char *s);
	void Div(const int &s);
	void Div(const Int64 &s);

	void Mod(const char *s) const;
	void Mod(const int &s) const;
	void Mod(const Int64 &s) const;
	
	bool Less(const char *s) const;
	bool Less(const int &s) const;
	bool Less(const Int64 &s) const;
	
	bool Great(const char *s) const;
	bool Great(const int &s) const;
	bool Great(const Int64 &s) const;
	
	bool Equal(const char *s) const;
	bool Equal(const int &s) const;
	bool Equal(const Int64 &s) const;
};

$$$REPLACE ME!$$$

class Role
{
public:
	RoleData _roledata;
	int _last_active_time;

	void SendToClient(const std::string& v);
	void SendUDPToClient(const std::string& v);
	void FastSess_Reset();
	void FastSess_Send(const std::string& v);
	void FastSess_OnAck(int index_ack);
	bool FastSess_IsReceived(int index) const;
	void FastSess_SetReceived(int index);
	void FastSess_SendAck();
	void FastSess_TriggerSend();
	void SendPVPJoin(int score);
	void SendPVPEnter(int flag);
	void SendPVPReady();
	void SendPVPLeave(int reason, int typ);
	void SendPVPCancle();
	void SendPVPSpeed(int speed);
	void SendPVPReset();
	void GetPVPVideo(const std::string& v);
	void DelPVPVideo(const std::string& v);
	bool IsActiveRole() const;
};

class Player
{
public:
	void Log(const char *v) const;
	void Err(const char *v) const;
	void SendToClient(const std::string& v);
	void SendUDPToClient(const std::string& v);
	void SendMessage(const Int64& target, const std::string& v) { SendMessage(target, v, 0); }
	void SendMessage(const Int64& target, const std::string& v, int delay);
	void SendMessage(const Int64& target, const std::string& v, const Int64List& extra_roles, const Int64List& extra_mafias, const IntList& extra_pvps) { SendMessage(target, v, 0, extra_roles, extra_mafias, extra_pvps); }
	void SendMessage(const Int64& target, const std::string& v, int delay, const Int64List& extra_roles, const Int64List& extra_mafias, const IntList& extra_pvps);
	void SendMessageToAllRole(const std::string& v) { SendMessageToAllRole(v, 0); }
	void SendMessageToAllRole(const std::string& v, int delay);
	void SendMessageToAllRole(const std::string& v, const Int64List& extra_roles, const Int64List& extra_mafias, const IntList& extra_pvps) { SendMessageToAllRole(v, 0, extra_roles, extra_mafias, extra_pvps); }
	void SendMessageToAllRole(const std::string& v, int delay, const Int64List& extra_roles, const Int64List& extra_mafias, const IntList& extra_pvps);
	void KickoutSelf(int reason);
	void AllocRoleName(const char *name, int create_time, const char *errorinfo);
	bool NetTime_NeedSync() const { return _network_time.NeedSync(); }
	void NetTime_Sync2Client();
};

class RoleIter
{
public:
	void Next();
	void Prev();
	Role* GetValue();
};

class PlayerManager
{
public:
	static PlayerManager& GetInstance()

	int Size() const { return _map_by_role_id.size(); }

	Role* Find(const Int64& k);

	RoleIter SeekToBegin() const { return RoleIter(_map_by_role_id.begin(), this, _tag); }
	RoleIter Seek(const Int64& k) const { return RoleIter(_map_by_role_id.find(k), this, _tag); }
	RoleIter SeekToLast() const;
};

class Mafia
{
public:
	Int64 _id;
	std::string _name;
	int _flag;
	std::string _announce;
	int _level;
	int _activity;
	Int64 _boss_id;
	std::string _boss_name;
	MafiaMemberMap _member_map;

	Mafia(): _flag(0), _level(0), _activity(0), _in_transaction(false) {}
};

class MafiaMapIter
{
public:
	void Next() { _rep.Next(); }
	Mafia* GetValue() { return _rep.GetValue(); }
};

class MafiaMap
{
public:
	MafiaMap(): _rep(this) {}

	int Size() const { return _rep.Size(); }

	Mafia* Find(const Int64& k) { return _rep.Find(k); }
	//void Insert(const Int64& k, const Mafia& v) { _rep.Insert(k, v); }
	//void Delete(const Int64& k) { _rep.Delete(k); }
	//void Clear() { _rep.Clear(); }

	MafiaMapIter SeekToBegin() const { return _rep.SeekToBegin(); }
	MafiaMapIter Seek(const Int64& k) const { return _rep.Seek(k); }
	MafiaMapIter SeekToLast() const { return _rep.SeekToLast(); }
};

class MafiaManager
{
public:
	static MafiaManager& GetInstance();
	MafiaMap& GetMap() { return _map; } //_map尽在big锁状态下才会传给lua，此时系统处于单线程模式，无所谓锁不锁
};

class PVP
{
public:
	PVPData _data;

	void PVPD_Create();
	void PVPD_Delete();
};

class SGT_TopList
{
public:
	TopManagerMap _top_manager;

	void SendMessageDaily(const Int64& target, const std::string& msgid, const int& mailid, const std::string& arg); //FIXME: will delete
	void SendMessageServerEvent(const int& event_type, const int& end_time);
};

class SGT_Misc
{
public:
	MiscData _miscdata;

	void SendMessage(const std::string& msg, int delay); //FIXME: will delete
};

class SGT_PveArena
{
public:
	PveArenaDataMapData _data;
};

};

inline CACHE::Player* API_GetLuaPlayer(void *p) { return (CACHE::Player*)p; }
inline CACHE::Role* API_GetLuaRole(void *p) { return (p ? &(((CACHE::Player*)p)->_role) : 0); }
inline CACHE::Mafia* API_GetLuaMafia(void *r) { return (CACHE::Mafia*)r; }
inline int API_PVP_Create(int mode, const CACHE::Int64& fighter1, const CACHE::Int64& fighter2);
inline void API_PVP_Delete(int id) { CACHE::PVPManager::GetInstance().LUA_Delete(id); }
inline CACHE::PVP* API_GetLuaPVP(void *r) { return (CACHE::PVP*)r; }
inline void API_LuaSave() {return CACHE::DBSaveManager::GetInstance().Save()}

inline CACHE::SGT_TopList* API_GetLuaTopList(void *r) { return (CACHE::SGT_TopList*)r; }
inline CACHE::SGT_TopList* API_GetLuaTopList() { return (InBigLock() ? &CACHE::SGT_TopList::GetInstance() : 0); }
inline CACHE::SGT_Misc* API_GetLuaMisc(void *r) { return (CACHE::SGT_Misc*)r; }
inline CACHE::SGT_Misc* API_GetLuaMisc() { return (InBigLock() ? &CACHE::SGT_Misc::GetInstance() : 0); }
inline CACHE::SGT_PveArena* API_GetLuaPveArena(void *r) { return (CACHE::SGT_PveArena*)r; }
inline CACHE::SGT_PveArena* API_GetLuaPveArena() { return (InBigLock() ? &CACHE::SGT_PveArena::GetInstance() : 0); }

