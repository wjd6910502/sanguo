#!/usr/bin/env python
#coding=GBK

import sys, os
from xml.dom import minidom

SIMPLE_TYPES = ( "number", "boolean", "string" )
RECEIVER2_LIST = ( "player", "mafia", "pvp", "big", "null", )

g_msgs = {}
g_type2msg = {}
g_receiver_msgs = {}
g_msg_2_receiver2 = {}

g_structs = {}

g_locks = {} # lock_name=>[cmd1, cmd2, ...]

class ParseError():
	pass

def abort(desc):
	print u"FATAL ERROR: "+desc
	raise ParseError

def warning(desc):
	print u"WARNING: "+desc

def parseMsgNode(msg_node):
	name = ""
	maxsize = 1024
	type = 0
	receivers = []
	receiver2 = ""
	variables = []
	locks = []

	for (k,v) in msg_node.attributes.items():
		if k == "name":
			name = v
		elif k == "maxsize":
			maxsize = int(v)
		elif k == "type":
			type = int(v)
		elif k == "receiver":
			receivers = v.replace(" ","").replace("\t","").split(",")
		elif k == "receiver2":
			receiver2 = v
		elif k == "lock":
			locks = v.replace(" ","").replace("\t","").split(",")
	if len(name) == 0:
		abort(u"message缺少name")
	elif g_msgs.has_key(name):
		abort(u"message name重复: %s"%name)
	elif maxsize < 16:
		abort(u"message maxsize<16")
	elif type == 0:
		abort(u"message(%s) type==0"%name)
	elif g_type2msg.has_key(type):
		abort(u"message(%s) type重复: %d"%(name,type))
	elif len(receivers) == 0:
		abort(u"message(%s)缺少receiver"%name)
	elif len(receiver2) == 0:
		abort(u"message(%s)缺少receiver2"%name)
	elif receiver2 not in RECEIVER2_LIST:
		abort(u"message(%s) receiver2有误: %s"%(name,receiver2))

	g_msg_2_receiver2[type] = receiver2

	for l in locks:
		if not g_locks.has_key(l):
			g_locks[l] = []
		g_locks[l].append(type)

	for nd in msg_node.childNodes:
		if nd.nodeType == nd.ELEMENT_NODE and nd.tagName == "variable":
			var_name = ""
			var_type = ""
			var_is_vector = False
			for (k,v) in nd.attributes.items():
				if k == "name":
					var_name = v
				elif k == "type":
					var_type = v
				elif k == "vector":
					if v == "true":
						var_is_vector = True
			if len(var_name) == 0:
				abort(u"message(%s)变量缺少name"%name)
			if len(var_type) == 0:
				abort(u"message(%s)变量(%s)缺少type"%(name,var_name))
			variables.append((var_name, var_type, var_is_vector))
	#if len(variables) == 0:
	#	abort(u"message(%s)缺少变量"%name)
	return (name, maxsize, type, receivers, variables)

def parseStructNode(struct_node):
	name = ""
	variables = []

	for (k,v) in struct_node.attributes.items():
		if k == "name":
			name = v
	if len(name) == 0:
		abort(u"structure缺少name")

	for nd in struct_node.childNodes:
		if nd.nodeType == nd.ELEMENT_NODE and nd.tagName == "variable":
			var_name = ""
			var_type = ""
			var_is_vector = False
			for (k,v) in nd.attributes.items():
				if k == "name":
					var_name = v
				elif k == "type":
					for t in SIMPLE_TYPES:
						if t == v:
							var_type = v
					if g_structs.has_key(v):
						var_type = v
					if var_type == "":
						abort(u"structure(%s)包含错误的type(%s)"%(name,v))
				elif k == "vector":
					if v == "true":
						var_is_vector = True
			if len(var_name) == 0:
				abort(u"structure(%s)变量缺少name"%name)
			if len(var_type) == 0:
				abort(u"structure(%s)变量(%s)缺少type"%(name,var_name))
			variables.append((var_name, var_type, var_is_vector))
	if len(variables) == 0:
		abort(u"structure(%s)缺少变量"%name)
	return (name, variables)

def makeEntry(app, msgs):
	list = ""
	for c in msgs:
		list += """dofile "scripts/msgs/%s.lua"
""" % c

	epm = ""

	for k,v in g_msg_2_receiver2.items():
		if len(v)>0:
			epm += """	API_SetMsgReceiver2(%d, "%s")
""" % (k,v)
		else:
			epm += """	API_SetMsgReceiver2(%d, "")
""" % (k)
	epm += "\n"

	for lname,cmds in g_locks.items():
		for cmd in cmds:
			epm += """	API_SetMsgLock(%d,"%s")
""" % (cmd,lname)

	contents = """--DONT CHANGE ME!

dofile "scripts/localconfig.lua"
dofile "scripts/base64.lua"
dofile "scripts/serialize.lua"
dofile "scripts/serialize_struct.lua"
dofile "scripts/deserialize_struct.lua"
dofile "scripts/checksum.lua"
dofile "scripts/common.lua"
dofile "scripts/util.lua"

%s
dofile "scripts/serialize_message.lua"
dofile "scripts/prepare_others.lua"
dofile "scripts/deserialize_message.lua"

function InitMessageInMainThread()
	API_ResetMsgReceiver2()
	API_ReSetMsgLock()

%s
end

""" % (list,epm)

	try:
		os.makedirs("%s/scripts"%app, 0777)
	except:
		pass

	fp = open("%s/scripts/init_message.lua"%app, "w")
	fp.write(contents)
	fp.close()

def makeMessages(app, msgs):
	try:
		os.makedirs("%s/scripts/msgs"%app, 0777)
	except:
		pass

	for c in msgs:
		path = "%s/scripts/msgs/%s.lua"%(app,c)
		if os.access(path, os.F_OK):
			continue

		contents = ""
		if g_msg_2_receiver2[g_msgs[c][1]] == "player":
			contents = """function OnMessage_%s(player, role, arg, others)
	--player:Log("OnMessage_%s, "..DumpTable(arg).." "..DumpTable(others))
end
""" % (c,c)
		elif g_msg_2_receiver2[g_msgs[c][1]] == "mafia":
			contents = """function OnMessage_%s(mafia, arg, others)
	--mafia:Log("OnMessage_%s, "..DumpTable(arg).." "..DumpTable(others))
end
""" % (c,c)
		elif g_msg_2_receiver2[g_msgs[c][1]] == "pvp":
			contents = """function OnMessage_%s(pvp, arg, others)
	--pvp:Log("OnMessage_%s, "..DumpTable(arg).." "..DumpTable(others))
end
""" % (c,c)
		elif g_msg_2_receiver2[g_msgs[c][1]] == "big":
			contents = """function OnMessage_%s(playermap, arg)
	--API_Log("OnMessage_%s, "..DumpTable(arg))
end
""" % (c,c)
		elif g_msg_2_receiver2[g_msgs[c][1]] == "null":
			contents = """function OnMessage_%s(arg, others)
	--API_Log("OnMessage_%s, "..DumpTable(arg))
end
""" % (c,c)

		fp = open(path, "w")
		fp.write(contents)
		fp.close()

def makeSerializeMessage(app):
	#message
	p3 = ""
	for (type, name) in g_type2msg.items():
		p4 = ""
		(_, _, _, variables) = g_msgs[name]
		for (vname, vtype, v_is_vector) in variables:
			if vtype!="number" and vtype!="boolean" and vtype!="string":
				#structure
				if v_is_vector:
					p4 += """	if msg.%s==nil then
		Serialize(os, 0)
	else
		Serialize(os, #msg.%s)
		for i = 1, #msg.%s do
			__SerializeStruct(os, "%s", msg.%s[i])
		end
	end
""" % (vname, vname, vname, vtype, vname)
				else:
					p4 += """	__SerializeStruct(os, "%s", msg.%s)
""" % (vtype, vname)
			else:
				#simple type
				if v_is_vector:
					p4 += """	if msg.%s==nil then
		Serialize(os, 0)
	else
		Serialize(os, #msg.%s)
		for i = 1, #msg.%s do
			Serialize(os, msg.%s[i])
		end
	end
""" % (vname, vname, vname, vname)
				else:
					p4 += """	Serialize(os, msg.%s)
""" % vname

		p3 += """
msg_list[%s] = 
function(os, msg)
	Serialize(os, %d)
%s
end
""" % ("\""+name+"\"", type, p4)

	contents = """--DONT CHANGE ME!

local msg_list = {}

function SerializeMessage(msg)
	local os = {}

	if msg_list[msg.__type__] ~= nil then
		msg_list[msg.__type__](os, msg)
	else
		error("wrong message type: "..msg.__type__)
	end

	return table.concat(os)
end

%s

""" % p3

	try:
		os.makedirs("%s/scripts"%app, 0777)
	except:
		pass

	fp = open("%s/scripts/serialize_message.lua"%app, "w")
	fp.write(contents)
	fp.close()

def makeDeserializeMessage(app, msgs):
	#message
	p3 = ""
	for (type, name) in g_type2msg.items():
		if not name in msgs:
			continue
		p4 = ""
		(_, _, _, variables) = g_msgs[name]
		p4 += """	if checksum ~= nil then
		if checksum ~= G_CHECKSUM_M["%s"] then
			API_Log("Err in deserialize message %s: strus has changed!")
			return
		end
	end
""" % (name, name)
		for (vname, vtype, v_is_vector) in variables:
			if vtype!="number" and vtype!="boolean" and vtype!="string":
				#structure
				if v_is_vector:
					p4 += """	local count = 0
	is_idx, count = Deserialize(is, is_idx, "number");
	msg.%s = {}
	for i = 1, count do
		is_idx, msg.%s[i] = DeserializeStruct(is, is_idx, "%s")
	end
""" % (vname, vname, vtype)
				else:
					p4 += """	is_idx, msg.%s = DeserializeStruct(is, is_idx, "%s")
""" % (vname, vtype)
			else:
				#simple type
				if v_is_vector:
					p4 += """	local count = 0
	is_idx, count = Deserialize(is, is_idx, "number");
	msg.%s = {}
	for i = 1, count do
		is_idx, msg.%s[i] = Deserialize(is, is_idx, "%s")
	end
""" % (vname, vname, vtype)
				else:
					p4 += """	is_idx, msg.%s = Deserialize(is, is_idx, "%s")
""" % (vname, vtype)

		if g_msg_2_receiver2[type] == "player":
			p3 += """--%s
msg_list[%d] = 
function(is, is_idx, ud, api, msg, others, checksum)
%s
	local player = API_GetLuaPlayer(ud)
	local role = API_GetLuaRole(ud)
	API = API_GetLuaAPISet(api)
	OnMessage_%s(player, role, msg, others)
end
player_msg_list[%d] = 
function(is, is_idx, player, role, msg, checksum)
%s
	OnMessage_%s(player, role, msg, {})
end

""" % (name, type, p4, name, type, p4, name)
		elif g_msg_2_receiver2[type] == "mafia":
			p3 += """--%s
msg_list[%d] =
function(is, is_idx, ud, api, msg, others, checksum)
%s
	local mafia = API_GetLuaMafia(ud)
	API = API_GetLuaAPISet(api)
	OnMessage_%s(mafia, msg, others)
end

""" % (name, type, p4, name)
		elif g_msg_2_receiver2[type] == "pvp":
			p3 += """--%s
msg_list[%d] = 
function(is, is_idx, ud, api, msg, others, checksum)
%s
	local pvp = API_GetLuaPVP(ud)
	API = API_GetLuaAPISet(api)
	OnMessage_%s(pvp, msg, others)
end

""" % (name, type, p4, name)
		elif g_msg_2_receiver2[type] == "big":
			p3 +="""--%s
msg_list[%d] = 
function(is, is_idx, ud, api, msg, others, checksum)
	local playermap = CACHE.PlayerManager:GetInstance()
	API = API_GetLuaAPISet(api)
%s
	OnMessage_%s(playermap, msg)
end

""" % (name, type, p4, name)
		elif g_msg_2_receiver2[type] == "null":
			p3 +="""--%s
msg_list[%d] = 
function(is, is_idx, ud, api, msg, others, checksum)
	API = API_GetLuaAPISet(api)
%s
	OnMessage_%s(msg, others)
end

""" % (name, type, p4, name)

	contents = """--DONT CHANGE ME!
local msg_list = {}
local player_msg_list = {}

function DeserializeAndProcessMessage(ud, api, is, ...)
	local others = {}
	others.roles = {}
	others.mafias = {}
	others.pvps = {}
	local extra_roles_size = 0
	local extra_mafias_size = 0
	local extra_pvps_size = 0
	local arg = {...}
	for k,v in ipairs(arg) do
		if k==1 then
			--extra roles size
			extra_roles_size = v
		elseif k<=1+extra_roles_size then
			--extra roles
			v = API_GetLuaRole(v)
			others.roles[v._roledata._base._id:ToStr()] = v
		elseif k==1+extra_roles_size+1 then
			--extra mafias size
			extra_mafias_size = v
		elseif k<=1+extra_roles_size+1+extra_mafias_size then
			--extra mafias
			v = API_GetLuaMafia(v)
			others.mafias[v._data._id:ToStr()] = v
		elseif k==1+extra_roles_size+1+extra_mafias_size+1 then
			--extra pvps size
			extra_pvps_size = v
		elseif k<=1+extra_roles_size+1+extra_mafias_size+1+extra_pvps_size then
			--extra pvps
			v = API_GetLuaPVP(v)
			others.pvps[v._data._id] = v
		else
			PrepareOthers4Message(others,k-(1+extra_roles_size+1+extra_mafias_size+1+extra_pvps_size),v)
		end
	end

	local msg = {}
	local is_idx = 1
	is_idx, msg.__type__ = Deserialize(is, is_idx, "number")

	if msg_list[msg.__type__] ~= nil then
		msg_list[msg.__type__](is, is_idx, ud, api, msg, others)
	else
		error("wrong message type: "..msg.__type__)
	end
end

function _DeserializeAndProcessPlayerMessage(is, player, role, checksum)
	local msg = {}
	local is_idx = 1
	is_idx, msg.__type__ = Deserialize(is, is_idx, "number")

	if player_msg_list[msg.__type__] ~= nil then
		player_msg_list[msg.__type__](is, is_idx, player, role, msg, checksum)
	else
		error("wrong player message type: "..msg.__type__)
	end
end

%s

""" % p3

	try:
		os.makedirs("%s/scripts"%app, 0777)
	except:
		pass

	fp = open("%s/scripts/deserialize_message.lua"%app, "w")
	fp.write(contents)
	fp.close()

def CheckStrStruct(name):
	if g_structs.has_key(name):
		variables = g_structs[name]
		p1 = ""
		for(vname, vtype, v_is_vector) in variables:
			if vtype not in SIMPLE_TYPES:
				#structure
				if v_is_vector:
					p1 += str(vname)+"("+str(vtype)+")[]:"+str(CheckStrStruct(vtype))
				else:
					p1 += str(vname)+"("+str(vtype)+"):"+str(CheckStrStruct(vtype))
			else:
				#simple type
				if v_is_vector:
					p1 += str(vname)+"("+str(vtype)+")[]:"
				else:
					p1 += str(vname)+"("+str(vtype)+"):"
		return str(p1)
	else:
		print "ERROR STRUCTURE "+name+"!!!!!!!!!!!"

def DJBHash(str):
	hash = 3851
	for char in str:
		hash = (hash << 5) + hash + ord(char)

	hash = hash&0x7fffffff
	return hash

def makeCheckSumMessage(app, msgs):
	#message
	fp = open("gamed/scripts/checksum.lua", "a")
	p = ""
	p = """
--Hashcode for Message
G_CHECKSUM_M = {}
"""
	fp.write(p)
	for (type, name) in g_type2msg.items():
		if not name in msgs:
			continue
		(_, _, _, variables) = g_msgs[name]
		p1 = str(name)+":"
		for (vname, vtype, v_is_vector) in variables:
			if vtype!="number" and vtype!="boolean" and vtype!="string":
				if v_is_vector:
					p1 += str(vname)+"("+str(vtype)+")[]:"+str(CheckStrStruct(vtype))
				else:
					p1 += str(vname)+"("+str(vtype)+"):"+str(CheckStrStruct(vtype))
			else:
				if v_is_vector:
					p1 += str(vname)+"("+str(vtype)+")[]:"
				else:
					p1 += str(vname)+"("+str(vtype)+"):"
		hash = DJBHash(p1)
		fp.write("G_CHECKSUM_M[\""+name+"\"] = "+str(hash)+"\n")

	fp.close()

def main():
	xmldoc = minidom.parse("./msgs.xml")
	if xmldoc.firstChild.tagName != "messages":
		abort(u"msgs.xml文件格式有错误")

	root_node = xmldoc.firstChild
	for nd in root_node.childNodes:
		if nd.nodeType == nd.ELEMENT_NODE and nd.tagName == "message":
			msg = parseMsgNode(nd)
			(name, maxsize, type, receivers, variables) = msg
			g_msgs[name] = (maxsize, type, receivers, variables)
			g_type2msg[type] = name
			for r in receivers:
				if g_receiver_msgs.has_key(r):
					g_receiver_msgs[r].append(name)
				else:
					g_receiver_msgs[r] = [name, ]
	#print g_msgs
	#print g_type2msg
	#print g_receiver_msgs

	xmldoc = minidom.parse("./strus.xml")
	if xmldoc.firstChild.tagName != "structures":
		abort(u"strus.xml文件格式有错误")

	root_node = xmldoc.firstChild
	for nd in root_node.childNodes:
		if nd.nodeType == nd.ELEMENT_NODE and nd.tagName == "structure":
			(name, variables) = parseStructNode(nd)
			g_structs[name] = variables

	for (k,v) in g_receiver_msgs.items():
		makeEntry(k, v)
	for (k,v) in g_receiver_msgs.items():
		makeMessages(k, v)
	for (k,v) in g_receiver_msgs.items():
		makeSerializeMessage(k)
	for (k,v) in g_receiver_msgs.items():
		makeDeserializeMessage(k, v)
	for (k,v) in g_receiver_msgs.items():
		makeCheckSumMessage(k, v)

if __name__ == "__main__":
	main()

