function OnCommand_TowerBuyBuff(player, role, arg, others)
	player:Log("OnCommand_TowerBuyBuff, "..DumpTable(arg).." "..DumpTable(others))
	
	local resp = NewCommand("TowerBuyBuff_Re")
	if role._roledata._tower_data._cur_layer ~= arg.layer then
		resp.retcode = G_ERRCODE["TOWER_ERROR_LEVEL"]
		player:SendToClient(SerializeCommand(resp))
		return
    end

	--arg.id==0的时候，是玩家点击了确定，进入下一层
	if arg.id == 0 then
		role._roledata._tower_data._cur_layer = role._roledata._tower_data._cur_layer + 1
		resp.retcode = G_ERRCODE["SUCCESS"]
		resp.id = 0
		player:SendToClient(SerializeCommand(resp))
		return
	end

	local buffs = role._roledata._tower_data._buff_info:Find(arg.layer)
	if buffs == nil then
		resp.retcode = G_ERRCODE["TOWER_ERROR_BUFF"]
		player:SendToClient(SerializeCommand(resp))
		return
	end

	local ed = DataPool_Find("elementdata")
	local layer = arg.layer
	if role._roledata._tower_data._difficulty == 2 then
		layer = layer + 100
	end

	local towerstage = ed:FindBy("tower_stage", layer)
	if towerstage == nil then
		resp.retcode = G_ERRCODE["TOWER_ERROR_DATA"]
		player:SendToClient(SerializeCommand(resp))
		return
	end

	local index = 0
	local lit = buffs._buff:SeekToBegin()
	local l = lit:GetValue()
	while l ~= nil do
		index = index + 1	
		if l._id == arg.id then
			--验证这层已经买过
			if l._buy_flag == 1 then
				resp.retcode = G_ERRCODE["TOWER_ERROR_GET_BUFF"]
				player:SendToClient(SerializeCommand(resp))
				return
			end

			--验证玩家星星数量是否足够 
			if role._roledata._tower_data._cur_star < towerstage.buffs_cost[index] then
				resp.retcode = G_ERRCODE["TOWER_ERROR_LESS_STAR"]
				player:SendToClient(SerializeCommand(resp))
				return
			end

			--如果是单体buff，验证hero_id
			local ed = DataPool_Find("elementdata")
			local buff_info = ed:FindBy("tower_adds", arg.id)
			if buff_info == nil then
				resp.retcode = G_ERRCODE["TOWER_ERROR_ARG"]
				player:SendToClient(SerializeCommand(resp))
				return
			end

			if buff_info.buff_category == 4 or buff_info.buff_category == 6 then
				if arg.hero_id == 0 then
					resp.retcode = G_ERRCODE["TOWER_ERROR_ARG"]
					player:SendToClient(SerializeCommand(resp))
					return
				end

				local f = role._roledata._hero_hall._heros:Find(arg.hero_id)
				if f == nil then
					resp.restcode = G_ERRCODE["TOWER_PARAM_HERO_NOT_EXIST"]
					player:SendToClient(SerializeCommand(resp))
					return
				end
			end

			role._roledata._tower_data._cur_star = role._roledata._tower_data._cur_star - towerstage.buffs_cost[index]
			l._buy_flag = 1
			local insert_data = CACHE.Int()
			insert_data._value = arg.id
			role._roledata._tower_data._buff:PushBack(insert_data)

			--buff效果处理
			if buff_info.buff_category == 4 then --单体回血
				local f = role._roledata._tower_data._injured_hero:Find(arg.hero_id)
				if f == nil then
					resp.restcode = G_ERRCODE["TOWER_PARAM_HERO_NOT_EXIST"]
					player:SendToClient(SerializeCommand(resp))
					return
				end
				local zhanli, max_hp = HERO_CalZhanli(role, arg.hero_id)
				f._hp = f._hp + max_hp * buff_info.buff_data / 1000
				resp.hero = {}
				resp.hero[#resp.hero + 1] = f
			elseif buff_info.buff_category == 5 then --全体回血
				local injured_it = role._roledata._tower_data._injured_hero:SeekToBegin()
				local injured = injured_it:GetValue()
				resp.hero = {}
				while injured ~= nil do
					local zhanli, max_hp = HERO_CalZhanli(role, injured._id)
					injured._hp = injured._hp + max_hp * buff_info.buff_data / 1000
					resp.hero[#resp.hero + 1] = injured
					injured_it:Next()
					injured = injured_it:GetValue()
				end

			elseif buff_info.buff_category == 6 then --单体复活
				local f = role._roledata._tower_data._dead_hero:Find(arg.hero_id)
				if f == nil then
					resp.restcode = G_ERRCODE["TOWER_PARAM_HERO_NOT_EXIST"]
					player:SendToClient(SerializeCommand(resp))
					return	
				end
				role._roledata._tower_data._dead_hero:Delete(arg.hero_id)
				local hero = CACHE.ShiLianHeroInfo()	
				hero._id = arg.hero_id
				local zhanli, max_hp = HERO_CalZhanli(role, arg.hero_id)
				hero._hp = max_hp * buff_info.buff_data / 1000
				role._roledata._tower_data._injured_hero:Insert(hero._id, hero)
				resp.hero = {}
				resp.hero[#resp.hero + 1] = hero
			end	

			resp.retcode = G_ERRCODE["SUCCESS"]
			resp.layer = role._roledata._tower_data._cur_layer
			resp.id = arg.id
			resp.cur_star = role._roledata._tower_data._cur_star
			player:SendToClient(SerializeCommand(resp))
			break
		end
		lit:Next()
		l = lit:GetValue()
	end
end
