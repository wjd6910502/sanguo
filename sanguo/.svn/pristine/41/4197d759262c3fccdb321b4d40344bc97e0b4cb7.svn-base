


TODO:
	机器人AI对打





编程规范：
	不要用任何形式存储或缓存datapool数据

编程规范(LUA)：
	不要使用coroutine
	不要使用全局变量/upvalue等等非local变量


空串的处理
非法串的处理

CORE=>Cache				V
prot=>cmd

ListFriends=>ListFriend

容易出错的位置:
	id没写ToStr()
	该写':'的地方写成了'.'
	{}没写特别坑			V
	pkg不匹配
	缓存模板

LOG
DOC


lib:
gcc -m64 -g -ggdb -O0 -c -I/home/duxiaogang/SANGUO_ServerSVN/lua/include -I../../include *.c



性能:
	1, 遍历
	2, 广播

cache共包含10w玩家
消息泵还是需要的?不需要
消息泵似乎还是需要的，用于比较弱的多人交互，例如更新自己信息到好友那


一个不做多线程:
但接口不要限制多线程


协议处理分3类:
1, 影响玩家自身
2, 影响玩家集合
	a, 协议指定所需玩家
	b, 玩家建立集合
3, 影响很多玩家
	TODO: 本服务器结构不适合此类需求，对于无法避免的，比如世界聊天，单写实现机制

NOTE:
	系统功能比如排行榜可以影响很多玩家，不在上列所属
	TODO: 大多地方的所谓遍历所有玩家，应该只对应一个活动玩家子集, 用于排行榜? 近期活跃玩家
	TODO: 建立一个不加锁数据缓冲用来查找玩家基本信息? 似乎没用
	TODO: 存盘
	TODO: 全服奖励，通知等等


	


交互场景:
	只涉及玩家:
		1, 无交互:
			lock player
		2, 多人, 但协议中可确定具体人员:
			lock player1/player2/...
		3, 多人, 但协议不确定具体人员:
			lock manager whole: 简单+事务支持
			message: 并行好
		4, 全局(遍历类):
			lock manager
			比如排行榜刷新, 但玩家行为不能导致此类操作
	
	涉及排行榜:
		lock topmanager first
		TODO: 锁定所有玩家可能太夸张了? 近期活跃玩家
		消息机制还是必须的, 比如不好确认某个cmd是否会触发排行榜操作, 因为很多cmd会导致升级, 进而导致更新排行榜个人信息
		排行榜分实时榜和定时榜
	
	涉及帮会:
		lock mafia first
		
	
	涉及竞技场:
		lock arena manager first

	涉及pk:

	lock seqence:
		top mafia arena player


Player一分为二



在协议头部增加通用字段，表示需要额外lock的对象?
12:::aGVsbG8sIGFsbCE=:
p123_p123_

两个想法


为什么要两个Continue?





datapool的path不支持绝对路径？

datapool TODO:
	find
	tointeger tostring tofloat ...





datapool读取字符串总是不对，是生成dpc的程序有误, 看起来数据是错的?


TODO:
	version check


玩家属性:


目前的方式加C++结构非常麻烦
	必须上模板，研究下tolua的模板支持


lua代码库


完善:
	线程结构
	消息泵



广播消息, 世界喊话


lua代码结构，比如升级了，怎么通知客户端?
	属性同步???



Int64比较操作


消息和task






消息:
	易失性
	A=>B:	主动推, 保证收到
	A=>ALL:	被动拉, 有限制(例如时间), 不保证收到

	应用场景:
		操作无法同步完成
		操作涉及多个和不确定对象时(不便提前对所有对象加锁)
		***拆散耗时任务, 提高响应能力***(有这种任务吗???)

		广播
		系统喊话
		全服邮件
		帮派聊天和成员信息




TODO:
	活跃玩家集合					v
	JIT
	8.16 ip/port
	signal
	account = zoneid+account
	死锁检测
	锁冲突检测
	机器人多个化
	性能和压力测试					v
	获得物品奖励之类放到聊天栏
	把datapool的warnning去掉
	试试datapool的多线程访问
	响应速度测试
	热更新
	服务器网页
	唯一名
	合法性测试，客户端乱发协议会否导致服务器异常
	roleid包含zoneid
	定时器(延迟)
	帮会宣战，结盟					x
	指定mafia					v
	临时单线程化					v TODO:
		不用改了，现在的方案就很好，应该改PWSL
	消息再规划
	协议分用户计数
	锁顺序描述文档
	初始化脚本中需要执行函数要注意多线程问题	v
	把机器人初始选项也弄到配置文件中去
	服务器性能统计工具				v
	模板化						x
	结构定义自动化, 考虑从cmd/msg独立出来		v
	文档
	pvp或者说房间服务器
	策划的lua怎么放
	如果还区分苹果android服务器，则限制下登录
	c++版的serialize
	maxsize
	encode/sig for udp
	lua执行出错时能否提供行号信息?应该可以的
	PVPOperation和pvp脱开
	重复号出什么问题?
	connection时间间隔
	仔细考虑下c++层的udp协议被hack可能, 包括客户端被破解
	忘了没定义extra时报个错
	delete pvp/transaction
	luac
	服务器改时间测试能力
	记得配置socket buffer, 包括手机端
	udp超时
	do reset
	延迟执行
	开关，可以选择某个功能是c++还是lua执行
	pvp服务器独立出来，否则save会有影响
	提示对方网络异常
	p2p
	pvp:
		各个状态加个超时检查
	throw exception
	安全关闭
	断线提示
	重新调整下connection封装, 把时间获取等玩意全封进来
	connection中包含网络状态rtt
	





线程规划:
	注意与多进程结构的尽量兼容


可能并不需要暴露PlayerManager结构给lua


grep OnCommand out | awk '{ print $6 }' | sort | uniq -c | sort -n >1
grep OnMessage out | awk '{ print $6 }' | sort | uniq -c | sort -n >2



前提:
	很多数据结构不会回收


文字记录下多锁顺序:








sync client:
	extra_mafias




ttl和压力:
	gamed初始化有bug				v
	压力一来, 现有链接会无响应?			v
	80=>90是个坎
	broadcast锁冲突有点严重?

	80:
		800%
		ttl 500





BIG:

worker thread:

normal task:
	//so something

big task:
	atomic_inc wait_count
	
	{
		lock big

		add some wait_task

		where(true)
		{
			if (wait_count==worker_thread_count) break;
			add more wait_task
		}
	
		//do something

		atomic_dec wait_count
	}

wait task:
	atomic_inc wait_count
	
	{
		lock big
		atomic_dec wait_count
	}




other thread(timer,poll):

	same to wait task of worker thread



事务:
异常rollback:
	data:
		big:
		other:
			player:
				save/load
			mafia:
				save/load
			toplist:
				save/load
				但不必每次都save现场
	protocol:
		cache
	msg:
		cache
	kickout:
		???
	log:
		不必回滚



	RoleIter



loop all role/mafia			v
transaction(cmd/msg)			v




压力测试(8.39):
	10.18:
		支持事务
		TestPublicChat x 180: 网络是瓶颈，所以关掉了下发
		cpu: 1700%
		StatisticManager::Dump, _cmd_count=347295(+900), _msg_put_count=693838(+1800), _msg_run_count=62665235(+162900)


cpu达到上限后会无法服务新连接，这算问题吗？

rpc todo:
	ntp
	sync cache
	delta sync
	c2s udp(+cache ack)

	不要影响热更新?
	要能lua处理

增量更新结构:
	可以marshal之后做字符串对比
	nb之选，可以避免key出现了
	独立管理

同步设计:
	SyncManager:
		CreatePVP
	



pvp:
	1, udp
	2, diff
	3, all






player fastsess
transaction
fast ack process





client:
	connection 383                                   v
	connection 385                                   v
	connection 495                                   v
	connection 568					v






pvpd:
	因为gamed本质上是个cached, 有定时存盘等影响性能的操作, 无法保证操作总是及时响应

	目标:
		满足三国类(战斗逻辑在客户端)的游戏pvp即可, 实际功能只是快速同步或转发协议

	计划:
		1 or N?
			N

		C++ or Lua?
			C++
			lua协议如何处理? 只有1条

		单线程 or 多线程?
			单线程

		热更新:
			reload lua or kill/restart?
			version


	协议:
		注册:
			RegisterPVPServer

		状态:
			UpdatePVPServerStatus

		pvp:
			CreatePVP
			DeletePVP
			PVPEnd

		热更新:
			不考虑, 逻辑很少, 即使真出问题, 也可以关闭功能重启


pvp系统:

1, 匹配制:
	客户端:
		初始阶段:
			1, 获取pvpd列表
			2, 获得延迟数据并发给gamed
			3, 获取nat类型并发给gamed
		匹配:


2, 邀请制:


3, 机器人:
	确认下AI是否会产生模拟输入?







udp make hole stund不能使用同一端口




不允许对结构赋值
事务需要try catch
一定要考虑热加载的影响










	hashmap + map<version,***,greater>

	tbl = RollbackableTable_Create()
		__index
		__newindex
		__gc

	rollbackable table operations:
		read
		write
	
	RollbackableTable_SetCurTick(tick)
		local xxx = tbl.xxx
			hashmap find
			map lower_bound

			xxx  25:b 21:a
			1	>=1	nil
			21	>=21	a
			23	>=23	a
			25	>=25	b
			28	>=28	b

		tbl.yyy = yyy
			hashmap find
			map find
			map insert

	RollbackableTable_SetCurTick(tick, confirm)


	There are eight basic types in Lua: nil, boolean, number, string, function, userdata, thread, and table.
		nil:
			必须保留
		boolean:
			
		number:
		string:
		function:
		userdata:
		thread:
		table:
			ref_table[n] = v






REVIEW:
	connection:
		连接状态机尚清晰, 主要原因是状态迁移图画得好

		reset机制有点忘了, 应该是设计或实现不够简洁:
			TransResponse中的do_reset只是提示
			Continue才是真正要执行的命令，client/server只有在收到Continue之后才可发送数据
			client登陆后自行GetRoleInfo，网络层出现不一致时server通知client执行DoReload, 注意不要重复GetRoleInfo(登录时)

		single instance
		close
		latency
		udp keepalive
		udp server+client 确定ip/port
		udp is inited
			切换网络后udp server怎么处理?

		lua req/resp之间有30ms延迟?

		ipv6

	机器人connection有个问题暂时遗留：如果发生网络切换，则udp server可能失效，匹配的时候检查下吧
		客户端改成continue之后TryGetNetType, 如果为block则重新open udp and TryGetNetType

	有时间的时候重写网络库吧，先总结用途和目标

	bug list:
		pvp结束后仍然会继续发包
		连续pvp会异常退出




TODO:
	pvpd busy
	日志
	各种连接不断开的检查

connection测试:
	断线测试：
		断开恢复:
			测试命令是否有效重传:						V
				err : CommandTask::Run, wrong data length               V
			测试pvp是否可行:						V

		切换网络:
			测试命令是否有效重传:						V
			测试pvp是否可行:						V

	P2P功能测试:
		是否及时停止发包							V
			end/reset之后还会send						V
		功能看起来没问题，但可能是因为rollback未完成，其实没做完整pk


	重复登录测试:									V
		似乎没问题，客户端处理也是对的


	数据流是否合理:

	服务器重启提示:





[root@vhost589 sanguo]# cat port_mapping 
#!/bin/sh

PORT_RANGE1=60001,60002,60003,60004,60005,60006,60007,60008,60009,60010
PORT_RANGE2=60011,60012,60013,60014,60015,60016,60017,60018,60019,60020
PORT_RANGE3=60021,60022,60023,60024,60025,60026,60027,60028,60029,60030

/sbin/iptables -I INPUT -i eth1 -p tcp -m multiport --dport $PORT_RANGE1 -j ACCEPT
iptables -A PREROUTING -t nat -i eth1 -p tcp -m multiport --dport $PORT_RANGE1 -j REDIRECT --to-port 9240

/sbin/iptables -I INPUT -i eth1 -p tcp -m multiport --dport $PORT_RANGE2 -j ACCEPT
iptables -A PREROUTING -t nat -i eth1 -p tcp -m multiport --dport $PORT_RANGE2 -j REDIRECT --to-port 9240

/sbin/iptables -I INPUT -i eth1 -p tcp -m multiport --dport $PORT_RANGE3 -j ACCEPT
iptables -A PREROUTING -t nat -i eth1 -p tcp -m multiport --dport $PORT_RANGE3 -j REDIRECT --to-port 9240






code review:
	1, db:
		save changed
			atomic
		first load
		load more

		dbversion

		TODO:
			OpenServer用big, 状态在这里切换
			存盘数据要一致, 一次性存盘
			避免并发存盘
			存盘间隔和活动玩家周期的关系
			错误日志
			size: 1==>compute

			





ios Socket.Select bug:
	grep GNET.IO.PollIO * | grep Poll -w







TODO:
	tolua不限制给userdata中不存在的成员赋值?
		storeatubox
	顶层对象管理器自动生成                                             v
	对手延迟
		


4月版本:
	
	[duxiaogang@localhost SANGUO_data]$ svn info
	路径: .
	URL: svn://10.68.8.38/SANGUO_data
	版本库根: svn://10.68.8.38/SANGUO_data
	版本库 UUID: db5d018a-ec24-4852-9355-02f5b324fffe
	版本: 58091
	节点种类: 目录
	调度: 正常
	最后修改的作者: chenzijie
	最后修改的版本: 58091
	最后修改的时间: 2016-04-20 04:44:53 +0800 (三, 2016-04-20)



5月版本:
	战役
	





singleton:
	1, sgts.xml
	2, forlua.pkg
		$#include/class/function
		可以参考singletons/singletons.pkg
	3, Makefile
		add .o


TODO:
	Lua沙盒化
	2模板
	structs.xml list赋值bug
	IO lib
	pvpd busy


rollback:
	降帧
	拉长操作延迟(动态)
	限制进入
	中途同步
	
	
	
	load/dump消耗高?
		pvp rollback：		7.7ms
			forcast tick	3.8
			load：		1.7
			dump：		1.4
	马上改了只copy dirty项之后，性能变好一些
	暂时不动了，如果将来还不够，去掉copy

	不动和放技能差很远scripts?
	放技能时BATTLECPP.FixTick消耗竟然很低? 已确认是统计问题


BattleTickCount_Rollback?
dump stat 1=>2?
RollBackCount? dump之后执行了多少次tick
uint dumptickframe = LastDumpBattleTickCount - ManipulateFrameDelta + (uint)RollBackCount;


CallLuaFunc("Revert", LUA_PARAMS());
CallLuaFunc("Confirm", LUA_PARAMS());


如果手机profiler有意义，那应该换一个工具
	profiler不配对，是个大问题


	











升级:
	4715
	4716
	4717
	4718

突破:
	10820


刀:
	13131

强化:
	14766
	14767

激战:
	17250



rollback本身可能目前就到这步了，剩下的就是做周边，比如：
1，降渲染帧，逻辑帧如果可能的话也可以考虑
2，根据自身情况动态调整操作延迟
3，限制太差的进入pvp

比如降低渲染帧率、降低分辨率，降低动画，特效限制提高....总之就是降低质量了
最重要的是开始时间一致，别人为造成rollback




C++给lua开放的函数:
1, 函数不要使用默认参数
2, 从lua调用时必须严格给参数赋值，拒绝nil


客户端招聘
战力变化?





加一个类似mafia的多对象结构:
	(可以参考1162版本)
	rpcalls.xml:
		extra_mafias
	cmdgen:
		extra_mafias
	msggen:
		receiver2
		extra_mafias
	gamed:
		gameprotocol/message/...:





desktop:
	svn://10.68.10.11/XOMPadData
		svn://10.68.8.38/XOMPadDataDesktop/trunk

	svn://10.68.8.38/ServerConfig
		svn://10.68.8.38/ServerConfigDesktop/trunk

	发客户端版本:
		http://10.68.8.38/xom-desktop/index.cgi

	更新服务器:
		http://10.68.8.16/
			更新内服: 同步策划数据(DESKTOP)到内服
			更新外服: 同步策划数据(开发分支)到测试服

	外服地址:
		123.59.7.214 19228 19229
		zoneid 1

	外服客户端更新地址:
		http://xajhydws.autopatch.173.com/xajhyd/xom-desktop/update/bin/version.xml

	外服重启页面:
		http://123.59.7.214
			


内服, 和笑傲移动共用吧，服务器修改应该很少

vss, wangwei的意思也用笑傲移动的就够了

art, 明天我看看wangwei放哪了给策划美术开个权限就可以






屏蔽字




pvp细抠:
	1, 起步不够同步
	2, 2pc测试，有线内网，本身延迟很小
		a, 无附加延迟
			预期基本无rollback
			结果起步差90ms，无rollback，符合
		b, 附加100ms延迟
			有rollback，但不连续
			第1次，结果起步差40ms，几乎每帧都做接近2次rollback
			第2次，结果起步差70ms，几乎每帧都做接近1次rollback
		c, 附加200ms延迟
			有rollback，且连续4次
			第1次，结果起步差90ms，几乎每帧都做接近4次rollback




rollback客户端代码细节:
	FixedUpdate => PVP_Dispose_RollBack:

	BattleTickCount: 当前tick, 从1开始
	opList: 当前tick玩家输入的操作，待处理
	ForecastInputList: 每tick玩家自己的操作，用于预测执行，注意不包含确定性操作，比如换人等
	ManipulateFrameDelta: N
	LastNetBattleTickCount: 已经处理过的网络输入数量
	LowFpsDispose:
	manipulateCommandQueueList: 经服务器确认过的每tick的双方输入的操作
	isDumpState:
	LastDumpBattleTickCount: 执行dump的tick
	RollBackCount: 之前已经预测执行了多少tick
	BattleTickCount_Rollback:
	isRecoverAnim: rollback方式下没有用到？

	ForceSyncNonLogic(): ?
	ConfirmFrameBegin(): ?

	前N tick除了处理操作外不执行任何游戏逻辑

	373-534暂且不管




pvp细抠2: 
	pc client(macbook)
	mz(1080)
	mi note(720)

	内服，赵云vs赵云，关掉低帧率处理代码，N=4, 手机无附加延迟

	1, pc client无附加延迟
		a, mz
			手机帧率约20+fps
			几乎没有rollback(16个)

		b, mi note
			手机帧率约25+fps
			几乎没有rollback

			改进后(prevCount*4<***x3)：
				手机帧率约25fps
				18/1610

			改进后(prevCount*4<***x3)：N=1
				手机帧率约25fps
				1323/1944 1131/1736

		c, mi note开性能模式
			手机帧率约30fps
			几乎没有rollback
		
	2, pc client附加400ms延迟
		a, mz
			手机帧率低，约10+fps

		b, mi note
			手机帧率约20+fps
			3倍rollback: 5193/1757

			改进后(prevCount*4<***x3)：
				手机帧率约25fps
				1000/1738 2121/2705

			改进后(prevCount*4<***x3)：N=1
				手机帧率约25fps
				1114/2084 985/1663 ??????????????????

		c, mi note开性能模式
			手机帧率约30fps
			2倍rollback: 5026/2570 5110/2261
			咔咔咔不明显，也有

			改进后(prevCount*4<***x3)：
				手机帧率约30fps
				984/1834

		d, mi note开性能模式, N=1
			手机帧率约30fps
			4倍rollback: 7172/1909

			改进后(prevCount*4<***x3)：
				手机帧率约30fps
				1880/2218

	3, pc client附加300ms延迟，手机附加300ms延迟，这已经是接近最差情况了(更差的情况是对面手机cpu也差，但这个不好量化)
		a, mz
			手机帧率低，约10fps
			4倍rollback: 9270/2526

		b, mi note
			手机帧率低，约10+fps
			4倍rollback: 7619/2273

			改进后(prevCount*2<***)：
				手机帧率约20fps
				2113/1799 3757/3167

		c, mi note开性能模式
			手机帧率约20~25+fps
			5倍rollback: 10225/2186
			!!!声音有点不对了，咔咔咔

			改进后(prevCount*2<***)：
				手机帧率约25+fps
				2809/2059 2241/1567 2147/1700

		d, mi note开性能模式, N=1
			手机帧率约20+fps
			8倍rollback: 15102/1907 12527/2172

			改进后(prevCount*2<***)：
				手机帧率约25fps
				2616/1756 2359/1807
			改进后(prevCount*4<***x3)：
				手机帧率约30fps
				830/1930 1368/1737
				!!!伤害数字叠一块了

		e, mi note开性能模式, mz替换pc client
			mi note帧率约20+fps
			mi note 5倍rollback: 15197/3372
			mz帧率个位数
			mz 2倍rollback: 7953/3376

	内服，赵云vs赵云，等帧，N=4, 手机无附加延迟

	没有pc客户端，双手机测试

	1, pc client无附加延迟
		挺好，看起来帧率较高，mz到40以上了

	2, pc client无附加延迟, N=1
		没法玩

	3, pc client附加400ms延迟
		没法玩
		
	3, pc client附加300ms延迟，手机附加300ms延迟，这已经是接近最差情况了(更差的情况是对面手机cpu也差，但这个不好量化)
		没法玩

发现问题:
	声音咔咔咔
	等帧模式下，延迟大时格挡技能容易出bug
	伤害数字叠一块了




pc/note 0 delay: 20fps

	[duxiaogang@localhost gamed]$ grep Dump out -c 
	944
	[duxiaogang@localhost gamed]$ grep Load out -c    
	943
	[duxiaogang@localhost gamed]$ grep Tick out -c
	2923
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	1017
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	1906

	f3c83d49fdc3f2f7585b327d4897fb1f
	[duxiaogang@localhost gamed]$ grep Dump out -c
	921
	[duxiaogang@localhost gamed]$ grep Load out -c
	920
	[duxiaogang@localhost gamed]$ grep Tick out -c
	2845
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	985
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	1860

	N=7:

	cd58ad47f6b1488441cb53b4f755ff9e
	[duxiaogang@localhost gamed]$ grep Dump out -c
	761
	[duxiaogang@localhost gamed]$ grep Load out -c
	760
	[duxiaogang@localhost gamed]$ grep Tick out -c
	2303
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	773
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	1530

pc/note 300ms delay each: 20+fps

	[duxiaogang@localhost gamed]$ grep Dump out -c
	103
	[duxiaogang@localhost gamed]$ grep Load out -c
	102
	[duxiaogang@localhost gamed]$ grep Tick out -c
	4467
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	2571
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	1896

	0eef3ab4764713e393f53048053ae73b
	[duxiaogang@localhost gamed]$ grep Dump out -c
	108
	[duxiaogang@localhost gamed]$ grep Load out -c
	107
	[duxiaogang@localhost gamed]$ grep Tick out -c
	4596-77
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	2637-77
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	1959

	开放帧率: 40+fps

	9e7dcbb46dcc2d970b94a50d1bad09e1
	[duxiaogang@localhost gamed]$ grep Dump out -c
	108
	[duxiaogang@localhost gamed]$ grep Load out -c
	107
	[duxiaogang@localhost gamed]$ grep Tick out -c
	4526
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	2579
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	1947

	开帧率+开性能模式: 50+fps

	bcb959397d18c3c21cb642dda8d9fec6
	[duxiaogang@localhost gamed]$ grep Dump out -c
	90
	[duxiaogang@localhost gamed]$ grep Load out -c
	89
	[duxiaogang@localhost gamed]$ grep Tick out -c
	3921
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	2219
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	1702

	开帧率+开性能模式+N=1: 50+fps

	83e206439dd339c998dc8cb4868daa92
	[duxiaogang@localhost gamed]$ grep Dump out -c
	72
	[duxiaogang@localhost gamed]$ grep Load out -c
	71
	[duxiaogang@localhost gamed]$ grep Tick out -c
	4429
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	2516
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	1913

	N=1: 20+fps

	[duxiaogang@localhost gamed]$ grep Dump out -c
	77
	[duxiaogang@localhost gamed]$ grep Load out -c
	76
	[duxiaogang@localhost gamed]$ grep Tick out -c
	5115
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	3032
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	2083

pc 400ms/note 0 delay each: 20+fps

	[duxiaogang@localhost gamed]$ grep Dump out -c
	268
	[duxiaogang@localhost gamed]$ grep Load out -c
	267
	[duxiaogang@localhost gamed]$ grep Tick out -c
	5003
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	3046
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	1957

	N=1: 20+fps

	[duxiaogang@localhost gamed]$ grep Dump out -c
	92
	[duxiaogang@localhost gamed]$ grep Load out -c
	91
	[duxiaogang@localhost gamed]$ grep Tick out -c
	grep Tick out | grep forcast -c
	4972
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	3191
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	1781
	




pc && note:

2:1

pc/note 300ms delay each: 40+fps
	15c51e781afe247ccfa8803d4556ff09
	[duxiaogang@localhost gamed]$ grep Dump out -c
	236
	[duxiaogang@localhost gamed]$ grep Load out -c
	235
	[duxiaogang@localhost gamed]$ grep Tick out -c
	4517
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	2961
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	1556

	ce1df2e9668c9952e5798e91e55f6b28
	[duxiaogang@localhost gamed]$ grep Dump out -c
	275
	[duxiaogang@localhost gamed]$ grep Load out -c
	274
	[duxiaogang@localhost gamed]$ grep Tick out -c
	5585
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	3662
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	1923







2d165ed620f5a20fac4bc5cf3e58b845
[duxiaogang@localhost gamed]$ grep Dump out -c
243
[duxiaogang@localhost gamed]$ grep Load out -c
242
[duxiaogang@localhost gamed]$ grep Tick out -c
4876
[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
3226
[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
1650
[duxiaogang@localhost gamed]$ grep Update out -c
2975



fd1e139b496b7c671a48bdd3ab22c70d
[duxiaogang@localhost gamed]$ grep Update out -c
2738
[duxiaogang@localhost gamed]$ grep Dump out -c
478
[duxiaogang@localhost gamed]$ grep Load out -c
477
[duxiaogang@localhost gamed]$ grep Tick out -c
1906
[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
477
[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
1429


[duxiaogang@localhost gamed]$ grep Update out -c
0
[duxiaogang@localhost gamed]$ grep Dump out -c
882
[duxiaogang@localhost gamed]$ grep Load out -c
881
[duxiaogang@localhost gamed]$ grep Tick out -c
2641
[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
895
[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
1746



[duxiaogang@localhost gamed]$ grep Dump out -c
775
[duxiaogang@localhost gamed]$ grep Load out -c
774
[duxiaogang@localhost gamed]$ grep Tick out -c
2331
[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
778
[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
1553





mi note VS s* note 3:

开性能模式，外服, 4:3

各加300ms延迟, mi 40+fps:
	d7e4354da4a3b03162243afb10d3cb14
	[duxiaogang@localhost gamed]$ grep Dump out -c
	289
	[duxiaogang@localhost gamed]$ grep Load out -c
	288
	[duxiaogang@localhost gamed]$ grep Tick out -c
	13913
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	7887
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	6026

s*加300ms延迟, mi 50fps:
	911dae4b1d870e1b2208ea6d596fb417
	[duxiaogang@localhost gamed]$ grep Dump out -c
	764
	[duxiaogang@localhost gamed]$ grep Load out -c
	763
	[duxiaogang@localhost gamed]$ grep Tick out -c
	8722
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	4798
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	3924

改成2:1

各加300ms延迟
	348c705089d92523096c0bc8c8035bea
	[duxiaogang@localhost gamed]$ grep Dump out -c
	733
	[duxiaogang@localhost gamed]$ grep Load out -c
	732
	[duxiaogang@localhost gamed]$ grep Tick out -c
	grep Tick out | grep forcast -c
	15839
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	10355
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	5484
	
s*加300ms延迟
	22f9c81b660ca23b17662e6e1d875bee
	[duxiaogang@localhost gamed]$ grep Dump out -c
	997
	[duxiaogang@localhost gamed]$ grep Load out -c
	996
	[duxiaogang@localhost gamed]$ grep Tick out -c
	10169
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	6385
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	3784
	
不加延迟
	0ac7548757969fb5658667d62a6f69bf
	[duxiaogang@localhost gamed]$ grep Dump out -c
	1428
	[duxiaogang@localhost gamed]$ grep Load out -c
	1427
	[duxiaogang@localhost gamed]$ grep Tick out -c
	5618
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	1444
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	4174





31f0364ea0b3fd5e69069efc93401728
[duxiaogang@localhost gamed]$ grep Dump out -c
1512
[duxiaogang@localhost gamed]$ grep Load out -c
1511
[duxiaogang@localhost gamed]$ grep Tick out -c
6023
[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
1597
[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
4426




e6a691065dc82b1954190f4fec0e8de0
[duxiaogang@localhost gamed]$ grep Dump out -c
590
[duxiaogang@localhost gamed]$ grep Load out -c
589
[duxiaogang@localhost gamed]$ grep Tick out -c
11753
[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
7630
[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
4123






pc/mini2 0 delay: 40+fps
	4690f0973f1e4a45522552b98088453c
	[duxiaogang@localhost gamed]$ grep Dump out -c
	1548
	[duxiaogang@localhost gamed]$ grep Load out -c
	1547
	[duxiaogang@localhost gamed]$ grep Tick out -c
	6231
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	1585
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	4646

pc/mini2 300ms delay each: 40+fps
	20747b667d430bc4dbbe0376fc664e5e
	[duxiaogang@localhost gamed]$ grep Dump out -c
	589
	[duxiaogang@localhost gamed]$ grep Load out -c
	588
	[duxiaogang@localhost gamed]$ grep Tick out -c
	11790
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -c
	7707
	[duxiaogang@localhost gamed]$ grep Tick out | grep forcast -v | wc -l
	4083








pvp匹配一边进







grep Dump out -c
grep Load out -c
grep Tick out -c
grep Tick out | grep forcast -c
grep Tick out | grep forcast -v | wc -l



stat/do_stat.sh
pve帧率不够时就不要指望pvp了，fps约莫会减15
mz pve ~45fps
包到达时间并不均匀，造成很多dump/load
网络消耗？






	0 delay, 42, perf mode, 55+fps
----------------------- tmp.1002.3
1020
1020
3431
1249
2182
	0 delay, 54low, ~15fps
----------------------- tmp.1004.3
1089
1089
3274
1094
2180




	160 delay, 42, perf mode, 50+fps
----------------------- tmp.1002.4
387
386
5962
3843
2119
	160 delay, 54low, ~15fps
----------------------- tmp.1004.4
344
343
4339
2218
2121






a8924d63f4b97be6b1e34a3af9613256

	0 delay, 42, ~40fps
----------------------- tmp.1002.1
648
648
2551
654
1897
	0 delay, 54low, ~15/~30fps cpu会抽风
----------------------- tmp.1004.1
950
950
2848
951
1897






vs PC:
each +160ms delay
perf enable
1080p
2:1
3v3
1 min
daqiao attack others
mi note
40+fps

a1036b9c0377728a0d778bd6344b1b6a

----------------------- tmp.1002.1
1498
1497
6627
4225
2402
----------------------- tmp.1002.2
1247
1246
6972
4489
2483
----------------------- tmp.1002.3
1471
1470
7525
4835
2690

vs mz:
基本情况一致，手感略差，心理作用？mz帧率不稳，fps比较低
----------------------- tmp.1002.4
723
722
7068
4529
2539
----------------------- tmp.1002.5
851
850
6800
4318
2482
----------------------- tmp.1002.6
811
810
6691
4250
2441





8.14:
	注意：都是空载！！！

	mz vs pc(rollback): 
		d70bd46d93d1544c3b12e74cd58143bf
		mz wait+low, all no extra delay:
			mz能保持30+fps
			一切很好
		mz wait+low, all +300ms:
			mz能保持30+fps
			操作延迟很大，但动作画面很稳定，看起来很舒服，其实就是大N时候的表现，因为虽然是等帧，但rollback+wait模式下操作的发送是独立的
		mz 42low, all no extra delay:
			mz能保持30+fps
			一切很好
			晕菜，帧率竟然不必wait模式低...
		mz 42low, all +300ms:
			mz能保持30+fps
			感受还好
			第二次镇帧率掉下来了，<20fps
	这个手机真是有病，最近几天都有这个问题，应该是过热cpu降频了，但没有任何提示，不继续用它测试了
			
	mi note vs pc(rollback): 
		6c55a2075594f5bbbd159c13a9b03a06
		mi wait+full, all no extra delay, no perf, 3v3, no op, 1 min, daqiao vs zhaoyun:
			50fps
			一切很好
		mi wait+full, all +300ms delay, no perf, 3v3, no op, 1 min, daqiao vs zhaoyun:
			50fps
			操作延迟很大，但动作画面很稳定，看起来很舒服，其实就是大N时候的表现，因为虽然是等帧，但rollback+wait模式下操作的发送是独立的
		mi 42+full, all no extra delay, no perf, 3v3, no op, 1 min, daqiao vs zhaoyun:
			40fps
			一切很好
		mi 42+full, all +300ms delay, no perf, 3v3, no op, 1 min, daqiao vs zhaoyun:
			25fps
		mi 42+full, all no extra delay, ENABLE perf, 3v3, no op, 1 min, daqiao vs zhaoyun:
			56fps
			一切很好，甚至有操作时也有52fps(tmp.1002.21)
		mi 42+full, all +300ms delay, ENABLE perf, 3v3, no op, 1 min, daqiao vs zhaoyun:
			47fps
			一切很好，甚至有操作时也有44fps(tmp.1002.25)

		+1 300ms: tmp.1002.26
		+1 0ms: tmp.1002.27



todo:
	1, bug 1800=>2400? 客户端显示的时间并不对...
	2, +300ms 40=>25?
		12 <==> 15
		----------------------- tmp.1002.12
		562
		561
		2535
		562
		1973
		65.908 40.2834253808
		----------------------- tmp.1002.15
		265
		264
		5526
		3609
		1917
		64.4 25.1397515528

	3, JZ-5G搭配mi实在太好了，还是+80ms delay吧，否则意义不大，今天基本都是<10
		 并非所有，cpu能力过剩的情况下才是


8.15:
	改成达到期待的半数以上时才rollback

	mi note vs pc(rollback): 
		d7d6a3e2c443a343bbcad9fdc61c8366
		mi 42+full, all no extra delay, no perf, 3v3, no op, 1 min, daqiao vs zhaoyun:
			50fps
			一切很好，甚至有操作时也有46fps(tmp.1002.5)
		mi 42+full, all +300ms delay, no perf, 3v3, no op, 1 min, daqiao vs zhaoyun:
			50fps
			有一次掉到了38fps，为什么？
				----------------------- tmp.1002.6
				231
				230
				5057
				3186
				1871
				62.704 51.5118652718
				----------------------- tmp.1002.7
				223
				222
				5101
				3213
				1888
				63.516 38.8563511556
				----------------------- tmp.1002.8
				228
				227
				5026
				3166
				1860
				62.539 51.3919314348
			tmp.1002.11继续
				----------------------- tmp.1002.11
				224
				223
				5051
				3180
				1871
				62.778 30.7910414476
			甚至按照比例细节，都完全一致
				awk -F':' '{ print $2 }' tmp.1002.6 | sort | uniq -c
			也许该看看cpu了

	42+full模式下，mz也是不行的(20fps)，确实性能问题, pve 3v3会低于30fps

	cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq

	开性能模式测试吧，均衡实在飘忽不定，即使游戏中cpu频率也是忽高忽低...
	以下tplink了，不是5g

	mi note(perf) vs pc(rollback): 
		txt丢了，保留几个tmp吧: bak/tmp/*
		mi 42+full, all no extra delay, 3v3, no op, 1 min, daqiao vs zhaoyun:
		mi 42+full, all +80ms delay, 3v3, no op, 1 min, daqiao vs zhaoyun:
			----------------------- tmp.1002.1
			378
			377
			2473
			600
			1873
			62.498 57.1058273865
			----------------------- tmp.1002.2
			479
			478
			2653
			789
			1864
			62.305 58.0049755236
			----------------------- tmp.1002.3
			400
			400
			2497
			620
			1877
			62.664 56.7151793693
			----------------------- tmp.1002.4
			410
			410
			2489
			620
			1869
			62.394 56.3996538129
			----------------------- tmp.1002.5		op
			556
			556
			3365
			885
			2480
			82.778 52.9609316485
			----------------------- tmp.1002.6
			721
			720
			3194
			1314
			1880
			62.834 55.5431772607
		mi 42+full, all +160ms delay, 3v3, no op, 1 min, daqiao vs zhaoyun:
			----------------------- tmp.1002.12
			501
			500
			4613
			2663
			1950
			65.223 52.2208423409
			----------------------- tmp.1002.13
			419
			418
			4557
			2690
			1867
			62.493 51.1897332501
			----------------------- tmp.1002.14		op
			566
			565
			5856
			3358
			2498
			83.559 48.6602281023
			----------------------- tmp.1002.15
			477
			476
			4452
			2584
			1868
			62.517 52.2257945839
			----------------------- tmp.1002.16
			471
			470
			4528
			2636
			1892
			63.362 51.8923013794
		mi 42+full, all +300ms delay, 3v3, no op, 1 min, daqiao vs zhaoyun:
			----------------------- tmp.1002.7
			229
			228
			5093
			3217
			1876
			63.041 48.4922510747
			----------------------- tmp.1002.8
			243
			242
			5393
			3397
			1996
			66.993 48.6916543519
			----------------------- tmp.1002.9		op
			279
			278
			6691
			4234
			2457
			82.285 44.6739989062
			----------------------- tmp.1002.10
			232
			231
			5083
			3211
			1872
			62.867 48.5946522023
			----------------------- tmp.1002.11
			237
			236
			5230
			3296
			1934
			64.863 48.3326395634
		mi 42+full+seal, all +300ms delay, 3v3, no op, 1 min, daqiao vs zhaoyun:
			----------------------- tmp.1002.18
			235
			234
			5100
			3211
			1889
			63.314 45.9140158575
			----------------------- tmp.1002.19
			234
			233
			5092
			3211
			1881
			63.093 47.1526159796
			----------------------- tmp.1002.20		op
			314
			313
			6827
			4297
			2530
			84.812 41.9162382682
			----------------------- tmp.1002.21
			227
			226
			5079
			3183
			1896
			63.622 46.2261481877
			----------------------- tmp.1002.22
			223
			222
			5013
			3141
			1872
			62.81 46.5690176723








