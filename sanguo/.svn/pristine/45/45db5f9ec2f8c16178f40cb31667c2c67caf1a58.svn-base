
#ifndef __GNET_GMCMD_GETROLEFORBIDCHAT_HPP
#define __GNET_GMCMD_GETROLEFORBIDCHAT_HPP

#include "localdefs.h"
#include "callid.hxx"
#include "state.hxx"


namespace GNET
{

class GMCmd_GetRoleForbidChat : public GNET::Protocol
{
	#include "gmcmd_getroleforbidchat"

	void Process(Manager *manager, Manager::Session::ID sid)
	{
		GLog::log(LOG_INFO, "gamed::GMCmd_GetRoleForbidChat::Process, roleid=%ld, session_id=%d", 
				roleid, session_id);

		GMCmd_GetRoleForbidChat_Re resp;

		Int64 key(roleid);
		ForbidRoleInfo* forbidinfo = SGT_Misc::GetInstance()._miscdata._forbidtalk_role_map.Find(key);
		if(forbidinfo)
		{
			time_t t = (time_t)(forbidinfo->_begintime+8*3600);
			struct tm *p;
			p = gmtime(&t);
			char s[100];
			strftime(s, sizeof(s), "%Y-%m-%d %H:%M:%S", p);
			std::string begintime = s;

			resp.retcode = 0; 
			resp.begintime = Octets(begintime.c_str(), begintime.size());
			resp.lasttime = forbidinfo->_time;
			resp.desc = Octets(forbidinfo->_desc.c_str(), forbidinfo->_desc.size());
			resp.session_id = session_id;
			manager->Send(sid, resp);
		}
		else
		{
			GLog::log(LOG_INFO, "gamed::GMCmd_GetRoleForbidChat::Process, Failure, roleid=%ld, session_id=%d, role not in forbidtalk list", 
				roleid, session_id);

			resp.retcode = -1;
			const char *desc = "role not in forbidtalk list";
			resp.desc = Octets(desc, strlen(desc));
			resp.session_id = session_id;
			manager->Send(sid, resp);
		}
	}
};

};

#endif
