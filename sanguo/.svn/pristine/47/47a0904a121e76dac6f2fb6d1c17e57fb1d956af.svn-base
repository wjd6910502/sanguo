function OnCommand_Lottery(player, role, arg, others)
	player:Log("OnCommand_Lottery, "..DumpTable(arg).." "..DumpTable(others))
	
	local resp = NewCommand("Lottery_Re")
	resp.retcode = G_ERRCODE["SUCCESS"]
	resp.lottery_id = arg.lottery_id
	resp.reward_ids = {}	
	--查找抽奖id
	local ed = DataPool_Find("elementdata")
	local lottery = ed:FindBy("lottery_id",arg.lottery_id)
	
	if lottery == nil then
		resp.retcode = G_ERRCODE["NO_LOTTERY"] 
		player:SendToClient(SerializeCommand(resp))
		return
	end
	
	--这里需要加限制模板id
	local cost_type = arg.cost_type	
	local price = 0
	local drop_id = 0
	local lottery_cnt = lottery.lottery_times
	for costdrop in DataPool_Array(lottery.costdrop) do		
		if costdrop.lottery_cost_type == cost_type or cost_type < 0 then			
			price = costdrop.lottery_price
			drop_id = costdrop.drop_id
			print("dropid"..costdrop.drop_id)
			break
		end			
	end
	
	--这里如果不调用GetRreshTime会返回
	--free 抽奖 -1  -2  -7
	local now = API_GetTime()

	--这里估计需要放开这个判断 都需要验证
	if cost_type < 0 then 			
		lottery_cnt = 1
		--计算时间 然后获取更新时间 --更新刷新时间
		local time_map = role._roledata._status._last_lotterytime
		local find_time = time_map:Find(arg.lottery_id)
		if find_time ~= nil and now - find_time > lottery.free_cd_start and now - find_time > lottery.free_cd_loop then
			role._roledata._status._last_lotterytime[arg.lottery_id] = now
		else
			return
		end
	end
			
	--1代表的是铜币购买，2代表的是元宝购买, 7代表的是
	if cost_type == 1 then
		if role._roledata._status._money < price then
			resp.retcode = G_ERRCODE["LOTTERY_MONEY_NOTENOUGH"] 
			player:SendToClient(SerializeCommand(resp))
			return
		end
		ROLE_SubMoney(role, price)
	elseif cost_type == 2 then
		if role._roledata._status._yuanbao < price then
			resp.retcode = G_ERRCODE["LOTTERY_YUANBAO_NOTENOUGH"] 
			player:SendToClient(SerializeCommand(resp))
			return
		end
		ROLE_SubYuanBao(role, price)
	elseif cost_type == 7 then
		--这里需要消耗声望值
		resp.retcode = G_ERRCODE["LOTTERY_COSTTYPE_NOTKNOWN"]
		player:SendToClient(SerializeCommand(resp)) 
		return
	else
		resp.retcode = G_ERRCODE["LOTTERY_COSTTYPE_NOTKNOWN"]
		player:SendToClient(SerializeCommand(resp))
		return
	end
	
	local lottery_info = {}
	
	while lottery_cnt > 0 do	
		
		--根据掉落表配置每次只会随即掉落一个物品
		local ditem = DROPITEM_DropItem(role, drop_id)
		if ditem == nil then
			RollBack(role,cost_type,price)		
			throw()						
		end

		local item_count = table.getn(ditem)	
		if item_count ~= 1 then
			RollBack(role,cost_type,price)
			throw()
		end
		
		local tmp_item = {}
		tmp_item.id = ditem[1].id
		tmp_item.num = ditem[1].count
		
		--找武将 是否首次获取看背包有没有 为空代表是物品
		local item = ed:FindBy("item_id",tmp_item.id)
		if item == nil then
			RollBack(role,cost_type,price)
			throw()
		end

		if item.item_type == 21 then
			--找一下是否首次获得
			local heroid =  item.type_data1 --这个是武将id 不是模板id 
			local hero_map = role._roledata._hero_hall._heros
			local h = hero_map:Find(heroid)	
			if h ~= nil then
				--转换成武魂物品
				tmp_item.firstget = 0
			else
				--第一次获取
				tmp_item.firstget = 1 	
			end

			--添加英雄
			HERO_AddHero(role, item.type_data1) 
			tmp_item.bproorhero = 1 
		else
			BACKPACK_AddItem(role,tmp_item.id,tmp_item.cnt)	
			tmp_item.bproorhero = 0		
			tmp_item.firstget = 0
		end
		
		resp.reward_ids[#resp.reward_ids+1]= tmp_item;		
		lottery_cnt = lottery_cnt - 1		
	end
	
	--发送物品给客户端
	player:SendToClient(SerializeCommand(resp)) 		
end

function RollBack(role,cost_type,price)
	if cost_type == 1 then
		ROLE_AddMoney(role, price)
	elseif cost_type == 2 then
		ROLE_AddYuanBao(role, price)
	elseif arg.typ == 7 then
		return
	else
		return
	end	
end


