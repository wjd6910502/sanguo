function OnCommand_WuZheShiLianSelectDifficulty(player, role, arg, others)
	player:Log("OnCommand_WuZheShiLianSelectDifficulty, "..DumpTable(arg).." "..DumpTable(others))
		
	local resp = NewCommand("WuZheShiLianSelectDifficulty_Re")
	resp.retcode = 0
	
	-- 难度定义 1-低  2-中 3-高  4-极高 5-暴怒 
	local difficulty = arg.difficulty

	--这里主要验证传入参数是否正确就可以
	local hero_trial = role._roledata._wuzhe_shilian	
	
	if difficulty < 1 or difficulty > hero_trial._high_difficulty then
		--关卡尚未开启
		resp.retcode = G_ERRCODE["TRIAL_ACTIVE_DIFFICULTY_LOCK"] 
		player:SendToClient(SerializeCommand(resp))
		return
	end
		
	--已经有难度
	if hero_trial._cur_difficulty ~= 0 and hero_trial._cur_difficulty ~= difficulty then
		resp.retcode = G_ERRCODE["TRIAL_ACTIVE_DIFFICULTY_LOCK"]
		player:SendToClient(SerializeCommand(resp))
		return
	else
		hero_trial._cur_difficulty = difficulty
	end
	
	--把关卡数据也直接给客户端 关卡三种状态 0 死亡  1 活着
	resp.opponent_info = {}
	local f = hero_trial._attack_info:Find(difficulty)	
	if f ~= nil then
		local sit = f._difficulty_attackinfo:SeekToBegin()
		local s = sit:GetValue()
		while s ~= nil do
			local opp_info ={}
			opp_info.id = s._id
			opp_info.level = s._level
			opp_info.alive = s._alive_flag		
			opp_info.stage = s._stage
			opp_info.hp = s._hp
			opp_info.anger = s._anger
			resp.opponent_info[#resp.opponent_info+1] = opp_info 
			sit:Next()
			s = sit:GetValue()		
		end
	else
		resp.retcode = G_ERRCODE["TRIAL_ACTIVE_PARAM_DIFFICULTY_WRONG"] 
		player:SendToClient(SerializeCommand(resp))
		return 
	end
	
	resp.cur_diffculty = hero_trial._cur_difficulty
	hero_trial._cur_stage = 9
	--当前关卡计算
	local f = hero_trial._attack_info:Find(difficulty)
	if f ~= nil then
		local sit = f._difficulty_attackinfo:SeekToBegin()
		local s = sit:GetValue()
		while s ~= nil do	
			if s._alive_flag == 1 and s._stage < hero_trial._cur_stage then
				hero_trial._cur_stage = s._stage					
			end
			sit:Next()
			s = sit:GetValue()
		end
	end
	
	--代表当前难度都已经通关
	resp.cur_stage  = hero_trial._cur_stage
	player:SendToClient(SerializeCommand(resp))

end
