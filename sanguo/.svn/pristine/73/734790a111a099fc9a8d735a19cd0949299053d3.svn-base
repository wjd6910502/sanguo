function OnCommand_EnterInstance(player, role, arg, others)
	player:Log("OnCommand_EnterInstance, "..DumpTable(arg))


	local resp = NewCommand("EnterInstance_Re")
	resp.retcode = 0
	resp.inst_tid = arg.inst_tid
	resp.seed = math.random(1000000) --TODO: 
	--判断这个副本是否满足了条件
	local ed = DataPool_Find("elementdata")
	local stage = ed:FindBy("stage_id", arg.inst_tid)
	if stage == nil then
		resp.retcode = G_ERRCODE["NO_STAGE"]--没有这个关卡
		player:SendToClient(SerializeCommand(resp))
		return
	end
	
	local vp = role._roledata._status._vp
	local need_vp = (stage.enter_tili + stage.finish_tili)
	if need_vp > vp then
		resp.retcode = G_ERRCODE["NO_ENOUGHVP"]--玩家的体力不足
		player:SendToClient(SerializeCommand(resp))
		return
	end
	
	if stage.limittimes ~= 0 then
		if LIMIT_TestUseLimit(role, stage.limittimes, 1) == false then
			resp.retcode = G_ERRCODE["NO_COUNT"]--这个副本没有了次数
			player:SendToClient(SerializeCommand(resp))
			return
		end
	end

	--前置关卡是否打过了,以及星级
	local instance = role._roledata._status._instances
	if stage.req_stage ~= 0 then
		local i = instance:Find(stage.req_stage)
		if i == nil then
			resp.retcode = G_ERRCODE["NO_REQSTAGE"]--还没有打通前置关卡
			player:SendToClient(SerializeCommand(resp))
			return
		else
			if i._star < stage.req_stagestars then
				resp.retcode = G_ERRCODE["NO_REQSTAR"]--前置关卡的星级，不符合要求
				player:SendToClient(SerializeCommand(resp))
				return
			end
		end
	end

	--判断玩家的等级是否达到了
	local level = role._roledata._status._level
	if level < stage.req_level then
		resp.retcode = G_ERRCODE["NO_LEVEL"]--玩家的等级没有达到这个关卡的要求
		player:SendToClient(SerializeCommand(resp))
		return
	end
	if ROLE_Subvp(role, stage.enter_tili) == false then
		resp.retcode = G_ERRCODE["NO_ENOUGHVP"]--玩家的体力不足
		player:SendToClient(SerializeCommand(resp))
		return
	end
	role._roledata._status._instance_id = arg.inst_tid

	--在这里保存阵容，并且发给客户端,这里只是做了简单的判断，个数
	if table.getn(arg.req_heros) == 0 and table.getn(arg.heros) > 0 and table.getn(arg.heros) <= 3 and stage.stagetype == 0 then
		role._roledata._status._last_hero:Clear()
		for i = 1, table.getn(arg.heros) do
			local value = CACHE.Int:new()
			value._value = arg.heros[i]
			role._roledata._status._last_hero:PushBack(value)
		end

		--发送给客户端
		local tmp_resp = NewCommand("GetLastHero_Re")
		tmp_resp.info = {}
		local last_hero = role._roledata._status._last_hero
		local lit = last_hero:SeekToBegin()
		local l = lit:GetValue()
		while l ~= nil do
			tmp_resp.info[#tmp_resp.info+1] = l._value
			lit:Next()
			l = lit:GetValue()
		end
		player:SendToClient(SerializeCommand(tmp_resp))
	end

	player:SendToClient(SerializeCommand(resp))
end
