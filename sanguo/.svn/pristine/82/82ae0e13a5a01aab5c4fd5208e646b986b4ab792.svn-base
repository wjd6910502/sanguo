	public:
		int64_t roleid;
		int index;
		int flag;
		enum { PROTOCOL_TYPE = PROTOCOL_PVPENTER };
	public:
		PvpEnter() { type = PROTOCOL_PVPENTER; }
		PvpEnter(void*) : Protocol(PROTOCOL_PVPENTER) { }
		PvpEnter (const int64_t& l_roleid,int l_index,int l_flag)
			 : roleid(l_roleid),index(l_index),flag(l_flag)
		{
			type = PROTOCOL_PVPENTER;
		}

		PvpEnter(const PvpEnter &rhs)
			: Protocol(rhs),roleid(rhs.roleid),index(rhs.index),flag(rhs.flag) { }

		GNET::Protocol *Clone() const { return new PvpEnter(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << index;
			os << flag;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> index;
			os >> flag;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 4096; }
