--使用道具给武将加经验
function HERO_AddExp(role, tid, exp, count)

	--首先判断是否有这个武将，没有的话怎么办。
	local heros = role._roledata._hero_hall._heros
	local hero = heros:Find(tid)
	if hero == nil then
		return G_ERRCODE["NO_HERO"]
	end
	--判断等级，经验
	local role_level = role._roledata._status._level
	local hero_level = hero._level
	local hero_exp = hero._exp
	local hero_order = hero._order
	
	--得到武将的升级表
	local ed = DataPool_Find("elementdata")
	local hero_levelup = ed.rolelevelexp
	local herograde = ed:FindBy("herograde_id", tid)
	local index = "grade"..hero_order.."_lv"
	local max_level = herograde[index]
	
	local flag = 1
	local need_exp = 0
	for exp in DataPool_Array(hero_levelup.rolelevelexp) do
		if flag == hero_level then
			need_exp = exp
			break
		end
		flag = flag + 1
	end

	local can_max_level = 0
	if max_level > hero_level then
		can_max_level = hero_level
	else
		can_max_level = max_level
	end
	--是否达到了当前界别的最高等级
	if can_max_level == hero_level and hero_exp == need_exp then
		return G_ERRCODE["HERO_EXP_FULL"]
	end

	--查看物品的
	--if BACKPACK_HaveItem(role, tid, count) == false then
	--	return G_ERRCODE["ITEM_COUNT_LESS"]
	--end

	--BACKPACK_DelItem(role, tid, count)
	--开始给武将升级
	hero._exp = hero._exp + exp

	while hero._exp >= need_exp do
		if can_max_level == hero._level then
			if hero._exp > need_exp then
				hero._exp = need_exp
				break
			end
		else
			hero._level = hero._level + 1
			hero._exp = hero._exp - need_exp
		end
		
		flag = 1
		need_exp = 0
		for exp in DataPool_Array(hero_levelup.rolelevelexp) do
			if flag == hero._level then
				need_exp = exp
				break
			end
			flag = flag + 1
		end
	end

	--给客户端发送武将信息的修改
	local resp = NewCommand("UpdateHeroInfo")
	resp.hero_hall = {}
	resp.hero_hall.tid = tid
	resp.hero_hall.level = hero._level
	resp.hero_hall.order = hero._order
	resp.hero_hall.exp = hero._exp
	player:SendToClient(SerializeCommand(resp))

end
