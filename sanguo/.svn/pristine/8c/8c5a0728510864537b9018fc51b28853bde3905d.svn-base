	public:
		int64_t id;
		int64_t orignate_time;
		int64_t receive_time;
		int64_t transmit_time;
		enum { PROTOCOL_TYPE = PROTOCOL_UDPSYNCNETTIMERE };
	public:
		UDPSyncNetTimeRe() { type = PROTOCOL_UDPSYNCNETTIMERE; }
		UDPSyncNetTimeRe(void*) : Protocol(PROTOCOL_UDPSYNCNETTIMERE) { }
		UDPSyncNetTimeRe (int64_t l_id,int64_t l_orignate_time,int64_t l_receive_time,
			int64_t l_transmit_time)
			 : id(l_id),orignate_time(l_orignate_time),receive_time(l_receive_time)
			,transmit_time(l_transmit_time)
		{
			type = PROTOCOL_UDPSYNCNETTIMERE;
		}

		UDPSyncNetTimeRe(const UDPSyncNetTimeRe &rhs)
			: Protocol(rhs),id(rhs.id),orignate_time(rhs.orignate_time),receive_time(rhs.receive_time)
			,transmit_time(rhs.transmit_time) { }

		GNET::Protocol *Clone() const { return new UDPSyncNetTimeRe(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << id;
			os << orignate_time;
			os << receive_time;
			os << transmit_time;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> id;
			os >> orignate_time;
			os >> receive_time;
			os >> transmit_time;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 1024; }
