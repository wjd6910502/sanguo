function OnCommand_BattleFieldFinishEvent(player, role, arg, others)
	player:Log("OnCommand_BattleFieldFinishEvent, "..DumpTable(arg).." "..DumpTable(others))

	local resp = NewCommand("BattleFieldFinishEvent_Re")
	resp.battle_id = arg.battle_id
	resp.retcode = G_ERRCODE["SUCCESS"]

	--首先需要把当前格子里面NPC挂着的事件设置成已经触发
	local battle = role._roledata._battle_info:Find(arg.battle_id)
	local position = battle._position_info:Find(battle._cur_position)
	
	local npc_it = position._npc_info:SeekToBegin()
	local npc = npc_it:GetValue()
	while npc ~= nil do
		npc._event_flag = 1
		npc_it:Next()
		npc = npc_it:GetValue()
	end

	--下面开始分情况处理其余的东西
	if position._flag == 1 then
		--这次的移动结束了
		resp.join_battle_flag = 0
		player:SendToClient(SerializeCommand(resp))
		
		--这个协议用来表示这次移动结束的
		local resp = NewCommand("BattleFieldCapturedPosition")
		resp.battle_id = arg.battle_id
		resp.event = 0
		player:SendToClient(SerializeCommand(resp))
		return
	elseif position._flag == 2 or position._flag == 3 then
		--查看是否有敌方NPC，有的话进入战斗，没有的话，就直接设置成己方的，并且触发事件
		local army_flag = 0
		local npc_it = position._npc_info:SeekToBegin()
		local npc = npc_it:GetValue()
		while npc ~= nil do
			if npc._camp == 2 then
				army_flag = 1
				break
			end
			npc_it:Next()
			npc = npc_it:GetValue()
		end
		if army_flag == 1 then
			resp.join_battle_flag = 1
			player:SendToClient(SerializeCommand(resp))
			return
		else
			position._flag = 1
			position._event_flag = 1 
			
			resp.join_battle_flag = 0
			resp.event = 0
			player:SendToClient(SerializeCommand(resp))
		
			--这个协议用来表示这次移动结束的
			local resp = NewCommand("BattleFieldCapturedPosition")
			resp.battle_id = arg.battle_id
			resp.position_info = ROLE_MakeBattleCurPositionInfo(role, arg.battle_id)
			resp.event = 0
			player:SendToClient(SerializeCommand(resp))
			return
		end
	end
end
