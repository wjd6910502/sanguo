function OnCommand_MilitarySweep(player, role, arg, others)
	player:Log("OnCommand_MilitarySweep, "..DumpTable(arg).." "..DumpTable(others))

	local resp = NewCommand("MilitarySweep_Re")

	local ed = DataPool_Find("elementdata")
	local vip_data = ed:FindBy("vip_level", ROLE_GetVIP(role))
	if vip_data == nil then
		resp.retcode = G_ERRCODE["MILITARY_ERROR_DATA"]
		player:SendToClient(SerializeCommand(resp))
		player:Log("OnCommand_MilitarySweep, error=MILITARY_ERROR_DATA")
		return
	end

	if vip_data.dailybenefits_sweep_switch == 0 then
		resp.retcode = G_ERRCODE["MILITARY_ERROR_VIP"]
		player:SendToClient(SerializeCommand(resp))
		player:Log("OnCommand_MilitarySweep, error=MILITARY_ERROR_VIP")
		return
	end

	local military = ed:FindBy("military", arg.stage_id)
	if military == nil then
		resp.retcode = G_ERRCODE["MILITARY_ERROR_ARG"]
		player:SendToClient(SerializeCommand(resp))
		player:Log("OnCommand_MilitarySweep, error=MILITARY_ERROR_ARG")
		return
	end

	if role._roledata._status._yuanbao < military.sweep_cost then
		resp.retcode = G_ERRCODE["YUANBAO_LESS"]
		role:SendToClient(SerializeCommand(resp))
		player:Log("OnCommand_MilitarySweep, error=YUANBAO_LESS")
		return
	end

	local now = API_GetTime()
	local date = os.date("*t", now)
	if military.open_day[date.wday+1] == 0 then
		resp.retcode = G_ERRCODE["MILITARY_ERROR_ACTIVIE"]
		player:SendToClient(SerializeCommand(resp))
		player:Log("OnCommand_MilitarySweep, error=MILITARY_ERROR_ACTIVIE")
		return
	end

	if role._roledata._status._level < military.dificulty_level then
		resp.retcode = G_ERRCODE["MILITARY_ERROR_LEVEL"]
		player:SendToClient(SerializeCommand(resp))
		player:Log("OnCommand_MilitarySweep, error=MILITARY_ERROR_LEVEL")
		return
	end

	local info = role._roledata._military_data._stage_data:Find(arg.stage_id)
	if info ~= nil then
		if info._cd > now then
			resp.retcode = G_ERRCODE["MILITARY_ERROR_CD"]
			player:SendToClient(SerializeCommand(resp))
			player:Log("OnCommand_MilitarySweep, error=MILITARY_ERROR_CD")
			return
		end

		--已经战斗次数
		if info._times >= military.daily_limit then
			resp.retcode = G_ERRCODE["MILITARY_ERROR_TIMES"]
			player:SendToClient(SerializeCommand(resp))
			player:Log("OnCommand_MilitarySweep, error=MILITARY_ERROR_TIMES")
			return
		end
	end

	--计算能扫荡的最大难度
	local index = 0
	for data in DataPool_Array(military.nandu_set) do
		if data.nandu_dificulty_level > role._roledata._status._level then
			break
		end
		index = index + 1
	end

	if index < 1 then
		resp.retcode = G_ERRCODE["MILITARY_ERROR_DATA"]
		player:SendToClient(SerializeCommand(resp))
		player:Log("OnCommand_MilitaryJoinBattle, error=MILITARY_ERROR_DATA")
		return
	end

	ROLE_SubYuanBao(role, military.sweep_cost)

	local reward_id = military.nandu_set[index].nandu_reward_id
	resp.item = {}
	local Reward = DROPITEM_Reward(role, reward_id)
	local item_count = table.getn(Reward.item)
	for i = 1, item_count do
		local reward_info = {}
		reward_info.tid = Reward.item[i].itemid
		local times = 0
		if info ~= nil then
			times = info._times
		end
		Reward.item[i].itemnum = Reward.item[i].itemnum * (military.daily_limit-times)
		reward_info.count = Reward.item[i].itemnum
		resp.item[#resp.item+1] = reward_info
	end
	ROLE_AddReward(role, Reward, 0)

	if info == nil then
		local data = CACHE.MilitaryStageData()
		data._cd = 0
		data._times = military.daily_limit
		role._roledata._military_data._stage_data:Insert(arg.stage_id, data)
	else
		info._cd = 0
		info._times = military.daily_limit
	end	

	resp.retcode = G_ERRCODE["SUCCESS"]
	player:SendToClient(SerializeCommand(resp))
	return
end
