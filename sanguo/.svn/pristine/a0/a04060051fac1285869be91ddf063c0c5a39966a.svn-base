function OnCommand_BattleFieldGetRoundStateInfo(player, role, arg, others)
	player:Log("OnCommand_BattleFieldGetRoundStateInfo, "..DumpTable(arg).." "..DumpTable(others))

	local resp = NewCommand("BattleFieldGetRoundStateInfo_Re")
	resp.battle_id = arg.battle_id
	resp.round_state = arg.round_state

	local battle = role._roledata._battle_info:Find(arg.battle_id)

	if battle == nil then
		resp.retcode = G_ERRCODE["BATTLE_ID_NOT_EXIST"]
		player:SendToClient(SerializeCommand(resp))
		return
	end

	if battle._state == 0 then
		--战役还没有开始
		resp.retcode = G_ERRCODE["BATTLE_NOT_BEGIN"]
		player:SendToClient(SerializeCommand(resp))
		return
	elseif battle._state == 2 then
		resp.retcode = G_ERRCODE["BATTLE_HAVE_END"]
		player:SendToClient(SerializeCommand(resp))
		return
	end

	if battle._round_state ~= arg.round_state then
		resp.retcode = G_ERRCODE["BATTLEFIELD_ROUND_STATE_ERR"]
		player:SendToClient(SerializeCommand(resp))
		return
	end

	if battle._round_state == 1 then
		--在这里开始调用策划写的回合事件的脚本
		--处理完以后修改状态
		battle._round_state = 2
	elseif battle._round_state == 3 then
		--在这里开始调用策划写的NPC移动触发的事件
		--在这里处理完以后，需要把当前的回合数加1，判断是否有回合限制
		--然后修改当前状态状态，发送给客户端
		battle._round_state = 1
		battle._round_num = battle._round_num + 1
	else
		resp.retcode = G_ERRCODE["BATTLEFIELD_ROUND_STATE_ERR"]
		player:SendToClient(SerializeCommand(resp))
		return
	end

	--同步战役当前回合状态
	resp = NewCommand("BattleFieldUpdateRoundState")
	resp.battle_id = arg.battle_id
	resp.round_num = battle._round_num
	resp.round_state = battle._round_state
	player:SendToClient(SerializeCommand(resp))
end
