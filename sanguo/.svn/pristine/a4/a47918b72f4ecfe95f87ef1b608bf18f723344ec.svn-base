--给武将加经验.如果是使用道具的话，那么需要更具返回值在进行是否扣除物品
function HERO_AddExp(role, tid, itemexp)

	--首先判断是否有这个武将，没有的话怎么办。
	local heros = role._roledata._hero_hall._heros
	local hero = heros:Find(tid)
	if hero == nil then
		return G_ERRCODE["NO_HERO"]
	end
	--判断等级，经验
	local role_level = role._roledata._status._level
	local hero_level = hero._level
	local hero_exp = hero._exp
	local hero_order = hero._order
	
	--得到武将的升级表
	local ed = DataPool_Find("elementdata")
	local hero_levelup = ed.rolelevelexp
	local herograde = ed:FindBy("herograde_id", tid)
	local max_level = 0
	for grade in DataPool_Array(herograde.grade) do
		if grade.grade == hero_order then
			max_level = grade.max_lv
			break
		end
	end
	if max_level == 0 then
		return G_ERRCODE["NO_HERO"]
	end
	
	local flag = 1
	local need_exp = 0
	for tmp_exp in DataPool_Array(hero_levelup.rolelevelexp) do
		if flag == hero_level then
			need_exp = tmp_exp
			break
		end
		flag = flag + 1
	end

	local can_max_level = 0
	if max_level > role_level then
		can_max_level = role_level
	else
		can_max_level = max_level
	end
	--是否达到了当前界别的最高等级
	if can_max_level == hero_level and hero_exp == need_exp then
		return G_ERRCODE["HERO_EXP_FULL"]
	end

	--开始给武将升级
	hero._exp = hero._exp + itemexp

	while hero._exp >= need_exp do
		if can_max_level == hero._level then
			if hero._exp > need_exp then
				hero._exp = need_exp
				break
			end
		else
			hero._level = hero._level + 1
			hero._exp = hero._exp - need_exp
		end
		
		flag = 1
		need_exp = 0
		for tmp_exp in DataPool_Array(hero_levelup.rolelevelexp) do
			if flag == hero._level then
				need_exp = tmp_exp
				break
			end
			flag = flag + 1
		end
	end

	--给客户端发送武将信息的修改
	local resp = NewCommand("UpdateHeroInfo")
	resp.hero_hall = {}
	resp.hero_hall.tid = tid
	resp.hero_hall.level = hero._level
	resp.hero_hall.order = hero._order
	resp.hero_hall.exp = hero._exp
	player:SendToClient(SerializeCommand(resp))
	return G_ERRCODE["SUCCESS"]
end

--武将进阶的接口
function HERO_UpGrade(role, heroid)
	--首先判断是否有这个武将，没有的话怎么办。
	local heros = role._roledata._hero_hall._heros
	local hero = heros:Find(heroid)
	if hero == nil then
		return G_ERRCODE["NO_HERO"]
	end
	--判断界别是否达到了最高
	local hero_order = hero._order

	if hero_order >= 12 then
		return G_ERRCODE["MAX_HERO_ORDER"]
	end

	local ed = DataPool_Find("elementdata")
	local herograde = ed:FindBy("herograde_id", heroid)
	local item_id1 = 0
	local item_count1 = 0
	local item_id2 = 0
	local item_count2 = 0
	local max_level = 0
	for grade in DataPool_Array(herograde.grade) do
		if grade.grade == hero_order then
			max_level = grade.max_lv
			item_id1 = grade.material1
			item_count1 = grade.material1_quantity
			item_id2 = grade.material2
			item_count2 = grade.material2_quantity
			break
		end
	end

	--判断是否达到了当前界别的最高等级
	if hero._level < max_level then
		return G_ERRCODE["NOT_MAX_LEVEL_ORDER"]
	end
	
	--判断物品是否存在
	if item_id1 > 0 then
		if BACKPACK_HaveItem(role, item_id1, item_count1) == false then
			return G_ERRCODE["ITEM_COUNT_LESS"]
		end
	end
	
	if item_id2 > 0 then
		if BACKPACK_HaveItem(role, item_id2, item_count2) == false then
			return G_ERRCODE["ITEM_COUNT_LESS"]
		end
	end

	--在这里开始扣除材料，修改武将的界别
	if item_id1 > 0 then
		BACKPACK_DelItem(role, item_id1, item_count1)
	end
	if item_id2 > 0 then
		BACKPACK_DelItem(role, item_id2, item_count2)
	end

	hero._order = hero._order + 1
	
	--给客户端发送武将信息的修改
	local resp = NewCommand("UpdateHeroInfo")
	resp.hero_hall = {}
	resp.hero_hall.tid = heroid
	resp.hero_hall.level = hero._level
	resp.hero_hall.order = hero._order
	resp.hero_hall.exp = hero._exp
	player:SendToClient(SerializeCommand(resp))
	return G_ERRCODE["SUCCESS"]
end
