#include "pvpmatch.h"
#include "gcenterserver.hpp"
#include "pvpmatchsuccess.hpp"
#include "pvpenterre.hpp"

namespace GNET
{

int64_t PVPMatch::pvp_index = 0;

PVPMatch::PVPMatch()
{
	Initialize();
}

int PVPMatch::AddPVPData(int64_t roleid, pvp_data data)
{
	//首先查找这个玩家是否已经在进行匹配了
	std::map<int64_t, pvp_data>::iterator it = _data.find(roleid);
	if(it != _data.end())
	{
		return 1;
	}
	_data[roleid] = data;
	return 0;
}

bool PVPMatch::Initialize()
{
	IntervalTimer::Attach(this, (1000000) / IntervalTimer::Resolution());
	return true;
}

bool PVPMatch::Update()
{
	while (_data.size() >= 2)
	{
		std::map<int64_t, pvp_data>::iterator it = _data.begin();
		pvp_match_data tmp;
		tmp.fight1_id = it->second.role_id;
		tmp.fight1_zoneid = it->second.zoneid;
		tmp.fight1_hero = it->second.hero;

		_data.erase(it++);

		tmp.fight2_id = it->second.role_id;
		tmp.fight2_zoneid = it->second.zoneid;
		tmp.fight2_hero = it->second.hero;

		_data.erase(it++);
		
		pvp_index++;
		_match_data[pvp_index] = tmp;

		//给这两个玩家发送匹配成功的消息
		PvpMatchSuccess pro;
		pro.retcode = 0;
		pro.index = pvp_index;
		pro.roleid = tmp.fight1_id;
		GCenterServer::GetInstance()->DispatchProtocol(tmp.fight1_zoneid, pro);
		pro.roleid = tmp.fight2_id;
		GCenterServer::GetInstance()->DispatchProtocol(tmp.fight2_zoneid, pro);

	}

	//开始判断是否可以通知玩家双方都已经同意，可以进入战场了
	std::map<int64_t, pvp_match_data>::iterator it = _match_data.begin();
	for(; it != _match_data.end();)
	{
		if(it->second.fight2_flag == 1 && it->second.fight1_flag == 1)
		{
			//给玩家发送消息，并且把玩家从当前的队列中删除
			PvpEnterRe pro;
			pro.roleid = it->second.fight1_id;
			pro.fightid = it->second.fight2_id;
			pro.hero_list = it->second.fight1_hero;
			pro.fight_hero_list = it->second.fight2_hero;
			
			GCenterServer::GetInstance()->DispatchProtocol(it->second.fight1_zoneid, pro);

			pro.roleid = it->second.fight2_id;
			pro.fightid = it->second.fight1_id;
			pro.hero_list = it->second.fight2_hero;
			pro.fight_hero_list = it->second.fight1_hero;
			
			GCenterServer::GetInstance()->DispatchProtocol(it->second.fight2_zoneid, pro);

			_match_data.erase(it++);
		}
		else
		{
			it++;
		}
	}
	return true;
}

int PVPMatch::RolePvpEnter(int64_t roleid, int index, int flag)
{
	std::map<int64_t, pvp_match_data>::iterator it = _match_data.find(index);
	if(it != _match_data.end())
	{
		if(roleid == it->second.fight1_id)
		{
			it->second.fight1_flag = 1;
		}
		else if(roleid == it->second.fight2_id)
		{
			it->second.fight2_flag = 1;
		}
		else
		{
			return 2;
		}
	}
	else
	{
		return 1;
	}

	return 0;
}
};
