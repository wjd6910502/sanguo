#!/usr/bin/env python
#coding=GBK

import sys, os
from xml.dom import minidom

SIMPLE_TYPES = ( "number", "boolean", "string" )

g_cmds = {}
g_type2cmd = {}
g_receiver_cmds = {}
g_extra_roles_maxs = {}
g_extra_mafias_maxs = {}
g_extra_pvps_maxs = {}
g_lock_toplists = {}
g_lock_mist = {}

class ParseError():
	pass

def abort(desc):
	print u"FATAL ERROR: "+desc
	raise ParseError

def warning(desc):
	print u"WARNING: "+desc

def parseCmdNode(cmd_node):
	name = ""
	maxsize = 1024
	type = 0
	receivers = []
	variables = []
	extra_roles_max = 0
	extra_mafias_max = 0
	extra_pvps_max = 0
	locks = []

	for (k,v) in cmd_node.attributes.items():
		if k == "name":
			name = v
		elif k == "maxsize":
			maxsize = int(v)
		elif k == "type":
			type = int(v)
		elif k == "receiver":
			receivers = v.split(",")
		elif k == "extra_roles_max":
			extra_roles_max = int(v)
		elif k == "extra_mafias_max":
			extra_mafias_max = int(v)
		elif k == "extra_pvps_max":
			extra_pvps_max = int(v)
		elif k == "lock":
			locks = v.split(",")
	if len(name) == 0:
		abort(u"command缺少name")
	elif g_cmds.has_key(name):
		abort(u"command name重复")
	elif maxsize < 16:
		abort(u"command maxsize<16")
	elif type == 0:
		abort(u"command type==0")
	elif g_type2cmd.has_key(type):
		abort(u"command type重复: %d"%type)
	elif len(receivers) == 0:
		abort(u"command缺少receiver")
	elif extra_roles_max > 6:
		abort(u"command(%s) extra_roles_max太大了: %d"%(name,extra_roles_max))
	elif extra_mafias_max > 3:
		abort(u"command(%s) extra_mafias_max太大了: %d"%(name,extra_mafias_max))
	elif extra_pvps_max > 1:
		abort(u"command(%s) extra_pvps_max太大了: %d"%(name,extra_pvps_max))

	if extra_roles_max > 0:
		g_extra_roles_maxs[type] = extra_roles_max
	if extra_mafias_max > 0:
		g_extra_mafias_maxs[type] = extra_mafias_max
	if extra_pvps_max > 0:
		g_extra_pvps_maxs[type] = extra_pvps_max

	for l in locks:
		if l == "toplist":
			g_lock_toplists[type] = True
		elif l == "mist":
			g_lock_mist[type] = True
		else:
			abort(u"command 未知lock: %s"%l)

	for nd in cmd_node.childNodes:
		if nd.nodeType == nd.ELEMENT_NODE and nd.tagName == "variable":
			var_name = ""
			var_type = ""
			var_is_vector = False
			for (k,v) in nd.attributes.items():
				if k == "name":
					var_name = v
				elif k == "type":
					var_type = v
				elif k == "vector":
					if v == "true":
						var_is_vector = True
			if len(var_name) == 0:
				abort(u"command(%s)变量缺少name"%name)
			if len(var_type) == 0:
				abort(u"command(%s)变量(%s)缺少type"%(name,var_name))
			variables.append((var_name, var_type, var_is_vector))
	#if len(variables) == 0:
	#	abort(u"command(%s)缺少变量"%name)
	return (name, maxsize, type, receivers, variables)

def makeEntry(app, cmds):
	list = ""
	for c in cmds:
		list += """dofile "scripts/cmds/%s.lua"
""" % c

	list2 = ""
	for c in cmds:
		list2 += """require "NetWork.cmds.%s"
""" % c

	epm = ""
	for k,v in g_extra_roles_maxs.items():
		epm += """	API_SetCmdExtraRolesMax(%d,%d)
""" % (k,v)
	for k,v in g_extra_mafias_maxs.items():
		epm += """	API_SetCmdExtraMafiasMax(%d,%d)
""" % (k,v)
	for k,v in g_extra_pvps_maxs.items():
		epm += """	API_SetCmdExtraPVPsMax(%d,%d)
""" % (k,v)
	for k,_ in g_lock_toplists.items():
		epm += """	API_SetCmdLockToplist(%d)
""" % (k)
	for k,_ in g_lock_mist.items():
		epm += """	API_SetCmdLockMisc(%d)
""" % (k)

	contents = """--DONT CHANGE ME!

dofile "scripts/base64.lua"
dofile "scripts/serialize.lua"
dofile "scripts/serialize_struct.lua"
dofile "scripts/deserialize_struct.lua"
dofile "scripts/common.lua"
dofile "scripts/util.lua"

%s
dofile "scripts/serialize_command.lua"
dofile "scripts/deserialize_command.lua"

function InitCommandInMainThread()
	API_ResetCmdExtraRolesMax()
	API_ResetCmdExtraMafiasMax()
	API_ResetCmdExtraPVPsMax()
	API_ResetCmdLockToplist()
	API_ReSetCmdLockMisc()

%s
end

""" % (list,epm)

	try:
		os.makedirs("%s/scripts"%app, 0777)
	except:
		pass

	fp = open("%s/scripts/init_command.lua"%app, "w")
	fp.write(contents)
	fp.close()

	contents = """--DONT CHANGE ME!

require "NetWork.base64"
require "NetWork.serialize"
require "NetWork.serialize_struct"
require "NetWork.deserialize_struct"
require "NetWork.common"

%s
require "NetWork.serialize_command"
require "NetWork.deserialize_command"

""" % (list2)

	try:
		os.makedirs("%s/scripts"%app, 0777)
	except:
		pass

	fp2 = open("%s/scripts/init_command.lua.4client"%app, "w")
	fp2.write(contents)
	fp2.close()

def makeCommands(app, cmds):
	try:
		os.makedirs("%s/scripts/cmds"%app, 0777)
	except:
		pass

	for c in cmds:
		path = "%s/scripts/cmds/%s.lua"%(app,c)
		if os.access(path, os.F_OK):
			continue

		contents = """function OnCommand_%s(player, role, arg, others)
	--player:Log("OnCommand_%s, "..DumpTable(arg).." "..DumpTable(others))
end
""" % (c,c)
		fp = open(path, "w")
		fp.write(contents)
		fp.close()

def makeSerializeCommand(app):
	#command
	p3 = ""
	for (type, name) in g_type2cmd.items():
		p4 = ""
		(_, _, _, variables) = g_cmds[name]
		for (vname, vtype, v_is_vector) in variables:
			if vtype not in SIMPLE_TYPES:
				#structure
				if v_is_vector:
					p4 += """		if cmd.%s==nil then
			Serialize(os, 0)
		else
			Serialize(os, #cmd.%s)
			for i = 1, #cmd.%s do
				SerializeStruct(os, "%s", cmd.%s[i])
			end
		end
""" % (vname, vname, vname, vtype, vname)
				else:
					p4 += """		SerializeStruct(os, "%s", cmd.%s)
""" % (vtype, vname)
			else:
				#simple type
				if v_is_vector:
					p4 += """		if cmd.%s==nil then
			Serialize(os, 0)
		else
			Serialize(os, #cmd.%s)
			for i = 1, #cmd.%s do
				Serialize(os, cmd.%s[i])
			end
		end
""" % (vname, vname, vname, vname)
				else:
					p4 += """		Serialize(os, cmd.%s)
""" % vname

		p3  += """	elseif cmd.__type__ == "%s" then
		Serialize(os, %d)
%s""" % (name, type, p4)

	contents = """--DONT CHANGE ME!

function SerializeCommand(cmd)
	local os = {}

	if false then
		--never to here
%s
	end

	return table.concat(os)
end

""" % p3

	try:
		os.makedirs("%s/scripts"%app, 0777)
	except:
		pass

	fp = open("%s/scripts/serialize_command.lua"%app, "w")
	fp.write(contents)
	fp.close()

def makeDeserializeCommand(app, cmds):
	#command
	p3 = ""
	for (type, name) in g_type2cmd.items():
		if not name in cmds:
			continue
		p4 = ""
		(_, _, _, variables) = g_cmds[name]
		for (vname, vtype, v_is_vector) in variables:
			if vtype not in SIMPLE_TYPES:
				#structure
				if v_is_vector:
					p4 += """		is_idx, count = Deserialize(is, is_idx, "number");
		cmd.%s = {}
		for i = 1, count do
			is_idx, cmd.%s[i] = DeserializeStruct(is, is_idx, "%s")
		end
""" % (vname, vname, vtype)
				else:
					p4 += """		is_idx, cmd.%s = DeserializeStruct(is, is_idx, "%s")
""" % (vname, vtype)
			else:
				#simple type
				if v_is_vector:
					p4 += """		is_idx, count = Deserialize(is, is_idx, "number");
		cmd.%s = {}
		for i = 1, count do
			is_idx, cmd.%s[i] = Deserialize(is, is_idx, "%s")
		end
""" % (vname, vname, vtype)
				else:
					p4 += """		is_idx, cmd.%s = Deserialize(is, is_idx, "%s")
""" % (vname, vtype)

		p3  += """	elseif cmd.__type__ == %d then
		--%s
%s
		OnCommand_%s(player, role, cmd, others)
""" % (type, name, p4, name)

	contents = """--DONT CHANGE ME!

function DeserializeAndProcessCommand(ud, is, ...)
	if not API_IsNULL(ud) then player=API_GetLuaPlayer(ud) end
	if not API_IsNULL(ud) then role=API_GetLuaRole(ud) end

	local others = {}
	others.roles = {}
	others.mafias = {}
	others.pvps = {}
	local extra_roles_size = 0
	local extra_mafias_size = 0
	local extra_pvps_size = 0
	local arg = {...}
	for k,v in ipairs(arg) do
		if k==1 then
			--extra roles size
			extra_roles_size = v
		elseif k<=1+extra_roles_size then
			--extra roles
			v = API_GetLuaRole(v)
			others.roles[v._roledata._base._id:ToStr()] = v
		elseif k==1+extra_roles_size+1 then
			--extra mafias size
			extra_mafias_size = v
		elseif k<=1+extra_roles_size+1+extra_mafias_size then
			--extra mafias
			v = API_GetLuaMafia(v)
			others.mafias[v._id:ToStr()] = v
		elseif k==1+extra_roles_size+1+extra_mafias_size+1 then
			--extra pvps size
			extra_pvps_size = v
		elseif k<=1+extra_roles_size+1+extra_mafias_size+1+extra_pvps_size then
			--extra pvps
			v = API_GetLuaPVP(v)
			others.pvps[v._data._id] = v
		elseif k==1+extra_roles_size+1+extra_mafias_size+1+extra_pvps_size+1 then
			--extra top
			v = API_GetLuaTopManager(v)
			others.top = v
		elseif k==1+extra_roles_size+1+extra_mafias_size+1+extra_pvps_size+1+1 then
			--extra MiscManager
			v = API_GetLuaMiscManager(v)
			others.mist = v
		end
	end

	local cmd = {}
	local is_idx = 1
	is_idx, cmd.__type__ = Deserialize(is, is_idx, "number")

	if false then
		--never to here
%s
	end
end

""" % (p3)

	try:
		os.makedirs("%s/scripts"%app, 0777)
	except:
		pass

	fp = open("%s/scripts/deserialize_command.lua"%app, "w")
	fp.write(contents)
	fp.close()

	contents_4_client = """--DONT CHANGE ME!

function DeserializeAndProcessCommand(ud, is, ...)
	local player = nil
	local role = nil
	local others = {}
	local cmd = {}
	local is_idx = 1
	is_idx, cmd.__type__ = Deserialize(is, is_idx, "number")

	if false then
		--never to here
%s
	end
end

""" % (p3)

	try:
		os.makedirs("%s/scripts"%app, 0777)
	except:
		pass

	fp = open("%s/scripts/deserialize_command.lua.4client"%app, "w")
	fp.write(contents_4_client)
	fp.close()

def main():
	xmldoc = minidom.parse("./cmds.xml")
	if xmldoc.firstChild.tagName != "commands":
		abort(u"cmds.xml文件格式有错误")

	root_node = xmldoc.firstChild
	for nd in root_node.childNodes:
		if nd.nodeType == nd.ELEMENT_NODE and nd.tagName == "command":
			cmd = parseCmdNode(nd)
			(name, maxsize, type, receivers, variables) = cmd
			g_cmds[name] = (maxsize, type, receivers, variables)
			g_type2cmd[type] = name
			for r in receivers:
				if g_receiver_cmds.has_key(r):
					g_receiver_cmds[r].append(name)
				else:
					g_receiver_cmds[r] = [name, ]
	#print g_cmds
	#print g_type2cmd
	#print g_receiver_cmds

	for (k,v) in g_receiver_cmds.items():
		makeEntry(k, v)
	for (k,v) in g_receiver_cmds.items():
		makeCommands(k, v)
	for (k,v) in g_receiver_cmds.items():
		makeSerializeCommand(k)
	for (k,v) in g_receiver_cmds.items():
		makeDeserializeCommand(k, v)

if __name__ == "__main__":
	main()

