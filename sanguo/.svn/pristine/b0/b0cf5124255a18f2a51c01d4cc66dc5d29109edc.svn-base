	public:
		int64_t roleid;
		int index;
		int speed;
		enum { PROTOCOL_TYPE = PROTOCOL_PVPSPEED };
	public:
		PvpSpeed() { type = PROTOCOL_PVPSPEED; }
		PvpSpeed(void*) : Protocol(PROTOCOL_PVPSPEED) { }
		PvpSpeed (const int64_t& l_roleid,int l_index,int l_speed)
			 : roleid(l_roleid),index(l_index),speed(l_speed)
		{
			type = PROTOCOL_PVPSPEED;
		}

		PvpSpeed(const PvpSpeed &rhs)
			: Protocol(rhs),roleid(rhs.roleid),index(rhs.index),speed(rhs.speed) { }

		GNET::Protocol *Clone() const { return new PvpSpeed(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << index;
			os << speed;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> index;
			os >> speed;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 4096; }
