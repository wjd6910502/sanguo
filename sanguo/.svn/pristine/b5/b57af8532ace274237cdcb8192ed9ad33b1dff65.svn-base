
#ifndef __GNET_GETPVPVIDEORE_HPP
#define __GNET_GETPVPVIDEORE_HPP

#include "localdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "pvpvideodata"

namespace GNET
{

class GetPvpVideoRe : public GNET::Protocol
{
	#include "getpvpvideore"

	void Process(Manager *manager, Manager::Session::ID sid)
	{
		GLog::log(LOG_INFO, "GAMED::GetPvpVideoRe, retcode=%d, roleid=%ld", retcode, roleid);

		if(retcode == 0)
		{
			Marshal::OctetsStream os(video);
			PvpVideoData data;

			printf("GAMED::GetPvpVideoRe   11111111111111111111111 %.*s",video.size(), (char*)video.begin());
			data.unmarshal(os);
				
			Octets first, second, first_pvpinfo, second_pvpinfo, operation;

			Base64Encoder::Convert(first, data.first);
			Base64Encoder::Convert(second, data.second);
			Base64Encoder::Convert(first_pvpinfo, data.first_pvpinfo);
			Base64Encoder::Convert(second_pvpinfo, data.second_pvpinfo);
			printf("GAMED::GetPvpVideoRe   222222222222222222222222222222222222 %.*s",data.operation.size(), (char*)data.operation.begin());
			Base64Encoder::Convert(operation, data.operation);
			printf("GAMED::GetPvpVideoRe   33333333333333333333333333333333333 %.*s",operation.size(), (char*)operation.begin());

			string msg = "10023:";
			msg += std::string((char*)first.begin(), first.size());
			msg += ":";
			msg += std::string((char*)second.begin(), second.size());
			msg += ":";
			msg += std::string((char*)first_pvpinfo.begin(), first_pvpinfo.size());
			msg += ":";
			msg += std::string((char*)second_pvpinfo.begin(), second_pvpinfo.size());
			msg += ":";
			msg += std::string((char*)operation.begin(), operation.size());
			msg += ":";
			MessageManager::GetInstance().Put(roleid, roleid, msg.c_str(), 0);
		}
		else
		{
			char msg[128];
			snprintf(msg, sizeof(msg), "10022:%d:", retcode); //PvpGetVideoErr
			MessageManager::GetInstance().Put(roleid, roleid, msg, 0);
		}

	}
};

};

#endif
