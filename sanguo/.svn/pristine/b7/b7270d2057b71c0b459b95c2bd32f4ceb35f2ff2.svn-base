	public:
		int64_t roleid;
		int index;
		int reason;
		int typ;
		enum { PROTOCOL_TYPE = PROTOCOL_PVPLEAVE };
	public:
		PvpLeave() { type = PROTOCOL_PVPLEAVE; }
		PvpLeave(void*) : Protocol(PROTOCOL_PVPLEAVE) { }
		PvpLeave (const int64_t& l_roleid,int l_index,int l_reason,
			int l_typ)
			 : roleid(l_roleid),index(l_index),reason(l_reason)
			,typ(l_typ)
		{
			type = PROTOCOL_PVPLEAVE;
		}

		PvpLeave(const PvpLeave &rhs)
			: Protocol(rhs),roleid(rhs.roleid),index(rhs.index),reason(rhs.reason)
			,typ(rhs.typ) { }

		GNET::Protocol *Clone() const { return new PvpLeave(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << index;
			os << reason;
			os << typ;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> index;
			os >> reason;
			os >> typ;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 4096; }
