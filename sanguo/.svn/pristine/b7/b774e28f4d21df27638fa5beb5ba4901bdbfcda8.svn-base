	public:
		int64_t roleid;
		int index;
		int retcode;
		int time;
		enum { PROTOCOL_TYPE = PROTOCOL_PVPMATCHSUCCESS };
	public:
		PvpMatchSuccess() { type = PROTOCOL_PVPMATCHSUCCESS; }
		PvpMatchSuccess(void*) : Protocol(PROTOCOL_PVPMATCHSUCCESS) { }
		PvpMatchSuccess (const int64_t& l_roleid,int l_index,int l_retcode,
			int l_time)
			 : roleid(l_roleid),index(l_index),retcode(l_retcode)
			,time(l_time)
		{
			type = PROTOCOL_PVPMATCHSUCCESS;
		}

		PvpMatchSuccess(const PvpMatchSuccess &rhs)
			: Protocol(rhs),roleid(rhs.roleid),index(rhs.index),retcode(rhs.retcode)
			,time(rhs.time) { }

		GNET::Protocol *Clone() const { return new PvpMatchSuccess(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << index;
			os << retcode;
			os << time;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> index;
			os >> retcode;
			os >> time;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 4096; }
