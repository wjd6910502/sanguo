#include "pvpmanager.h"
#include "commonmacro.h"
#include "playermanager.h"
#include "pvpend.hpp"
#include "pvpgameclient.hpp"
#include "glog.h"

namespace GNET
{

PVP::~PVP()
{
	//GLog::log(LOG_INFO, "PVPD::PVP::~PVP, id=%d, fighter1=%ld, fighter2=%ld", _id, _fighter1._id, _fighter2._id);
	PlayerManager::GetInstance().Delete(_fighter1._id);
	PlayerManager::GetInstance().Delete(_fighter2._id);
}

void PVP::OnTimer(int tick, int now)
{
	if(_mode == 1)
	{
		if(tick%2 == _id%2) //per 20ms
		{
			//PVPTriggerSend
			Player *player1 = PlayerManager::GetInstance().Find(_fighter1._id);
			Player *player2 = PlayerManager::GetInstance().Find(_fighter2._id);
			if(!player1 || !player2)
			{
				//TODO: 这怎么可能?
				return;
			}
			player1->FastSess_TriggerSend();
			player2->FastSess_TriggerSend();
		}
	}
}

int PVP::CheckFighter(PVPFighter& fighter)
{
	//断线检查
	auto it = fighter._ops.find(_next_client_tick);
	if(it == fighter._ops.end())
	{
		fighter._wait_seconds++;
		if(fighter._wait_seconds > 20) return 1; //玩家已掉线
	}
	//网络状态差?
	//if(fighter._accumulate_latency > 15000) return 2;
	//if(fighter._delay_count > 1000) return 3;

	return 0;
}

void PVP::OnTimer1s(time_t now)
{
	if(_mode == 1)
	{
		//PVPHeartbeat
		int ret = CheckFighter(_fighter1);
		if(ret)
		{
			GLog::log(LOG_INFO, "PVPD::PVP::OnTimer1s, fighter1, _wait_seconds=%d, _accumulate_latency=%d, _delay_count=%d",
			          _fighter1._wait_seconds, _fighter1._accumulate_latency, _fighter1._delay_count);
			PVPEnd prot;
			prot.id = _id;
			prot.fighter1 = _fighter1._id;
			prot.fighter2 = _fighter2._id;
			prot.reason = ret;
			PVPGameClient::GetInstance()->SendProtocol(prot);
			PVPManager::GetInstance().Delete(_id);
			return;
		}
		ret = CheckFighter(_fighter2);
		if(ret)
		{
			GLog::log(LOG_INFO, "PVPD::PVP::OnTimer1s, fighter2, _wait_seconds=%d, _accumulate_latency=%d, _delay_count=%d",
			          _fighter2._wait_seconds, _fighter2._accumulate_latency, _fighter2._delay_count);
			PVPEnd prot;
			prot.id = _id;
			prot.fighter1 = _fighter1._id;
			prot.fighter2 = _fighter2._id;
			prot.reason = 100+ret;
			PVPGameClient::GetInstance()->SendProtocol(prot);
			PVPManager::GetInstance().Delete(_id);
			return;
		}
	}
}

int64_t PVP::GetShouldArriveTime(int client_tick) const
{
	//PVP_CONST_CLIENT_TICK_MS略加一点, 不要限制太死
	return _fight_start_time*(int64_t)1000 + client_tick*(PVP_CONST_CLIENT_TICK_MS+2) + PVP_CONST_NET_TICK_MS/2 + _latency;
}

void PVP::OnPVPOpeartion(int64_t fighter, int client_tick, const char *op_encoded, const char *crc_encoded)
{
	if(_mode == 1)
	{
		if(client_tick < _next_client_tick) return; //客户端重发包, 不理会

		PVPFighter *ft = 0;
		if(fighter == _fighter1._id)
		{
			ft = &_fighter1;
		}
		else if(fighter == _fighter2._id)
		{
			ft = &_fighter2;
		}
		if(!ft) return;

		auto it = ft->_ops.find(client_tick);
		if(it != ft->_ops.end()) return; //操作已发出后不能修改
		ft->_ops[client_tick] = op_encoded; //不用解码, 因为并不需要理解

		if(client_tick==_next_client_tick) ft->_wait_seconds=0;

		timeval tv;
		gettimeofday(&tv, 0);
		int64_t now_ms = tv.tv_sec*(int64_t)1000+tv.tv_usec/1000;
		int64_t l = now_ms-GetShouldArriveTime(client_tick);
		if(l > 0)
		{
			//GLog::log(LOG_INFO, "PVPD::PVP::OnPVPOpeartion, fighter=%ld, _accumulate_latency=%d, l=%ld, now_ms=%ld, client_tick=%d, should=%ld, _latency=%d", fighter, ft->_accumulate_latency, l, now_ms, client_tick, GetShouldArriveTime(client_tick), _latency);
			ft->_accumulate_latency += (int)l;
			ft->_delay_count += 1;
		}

		Player *player1 = PlayerManager::GetInstance().Find(_fighter1._id);
		Player *player2 = PlayerManager::GetInstance().Find(_fighter2._id);
		if(!player1 || !player2)
		{
			//TODO: 这怎么可能?
			return;
		}
		//是否已经收集齐?
		while(true)
		{
			auto it1 = _fighter1._ops.find(_next_client_tick);
			if(it1 == _fighter1._ops.end()) break;
			auto it2 = _fighter2._ops.find(_next_client_tick);
			if(it2 == _fighter2._ops.end()) break;

			char buf[1024];
			snprintf(buf, sizeof(buf)-1, "10307:%d:%s:%s:", _next_client_tick, it1->second.c_str(), it2->second.c_str()); //PVPOperationSet
			player1->FastSess_Send(buf);
			player2->FastSess_Send(buf);

			_fighter1._ops.erase(it1);
			_fighter2._ops.erase(it2);

			int64_t l = now_ms - (_fight_start_time*(int64_t)1000 + _next_client_tick*(PVP_CONST_CLIENT_TICK_MS+2) + PVP_CONST_NET_TICK_MS/2);
			if(l > 0) _latency = (int)l;

			_next_client_tick++;
		}
	}
	else if(_mode == 2)
	{
		//int64_t opponent = 0;
		//if(fighter == _fighter1._id)
		//{
		//	if(_fighter2._status == 2) return;
		//	opponent = _fighter2._id;
		//}
		//else if(fighter == _fighter2._id)
		//{
		//	if(_fighter1._status == 2) return;
		//	opponent = _fighter1._id;
		//}
		//if(opponent)
		//{
		//	char buf[1024];
		//	snprintf(buf, sizeof(buf)-1, "10306:%lu:%d:%s:%s:", fighter, client_tick, op_encoded, crc_encoded);

		//	Player *oplayer = PlayerManager::GetInstance().Find(opponent);
		//	if(oplayer) oplayer->SendUDPGameProtocol(buf);
		//}
	}
}

void PVPManager::Initialize()
{
	IntervalTimer::Attach(this, (10000)/IntervalTimer::Resolution());
}

bool PVPManager::Update()
{
	static int _tick = 0;

	_tick++;
	time_t now = time(0);

	for(auto it=_will_delete_list.begin(); it!=_will_delete_list.end(); ++it)
	{
		auto im = _map.find(*it);
		if(im != _map.end())
		{
			delete im->second;
			_map.erase(im);
		}
	}
	_will_delete_list.clear();

	for(auto it=_map.begin(); it!=_map.end(); ++it)
	{
		PVP *pvp = it->second;
		pvp->OnTimer(_tick, now);
		if(_tick%SERVER_CONST_TICK_PER_SECOND == pvp->_id%SERVER_CONST_TICK_PER_SECOND) pvp->OnTimer1s(now);
	}

	return true;
}

PVP* PVPManager::Find(int id)
{
	if(_will_delete_list.find(id) != _will_delete_list.end()) return 0;

	auto it = _map.find(id);
	if(it == _map.end()) return 0;
	return it->second;
}

int PVPManager::Create(int id, int mode, int64_t fighter1, int64_t fighter2, int fight_start_time)
{
	if(_map.find(id) != _map.end()) return -1;
	if(PlayerManager::GetInstance().Find(fighter1)) return -2;
	if(PlayerManager::GetInstance().Find(fighter2)) return -3;

	_map[id] = new PVP(id, mode, fighter1, fighter2, fight_start_time);

	PlayerManager::GetInstance().Add(fighter1, id);
	PlayerManager::GetInstance().Add(fighter2, id);

	return 0;
}

void PVPManager::Delete(int id)
{
	_will_delete_list.insert(id);
}

}

