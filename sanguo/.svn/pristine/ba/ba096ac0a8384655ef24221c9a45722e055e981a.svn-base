function OnCommand_DebugCommand(player, role, arg, others)
	player:Log("OnCommand_DebugCommand, "..DumpTable(arg))

	if arg.typ=="levelup" then
		--level up
		role._roledata._status._level = role._roledata._status._level+arg.count1
		--通知好友
		local friends = role._roledata._friend._friends
		local fit = friends:SeekToBegin()
		local f = fit:GetValue()
		while f~=nil do
			--同步方式
			--local d_player = others:FindPlayer(f._brief._id)
			--if d_player~=nil then 
			--	local d_friends = d_player._role_friend._friends
			--	local d_f = d_friends:Find(player._role_base._id)
			--	if d_f~=nil then
			--		--d_f._brief._id = arg.id 
			--		d_f._brief._name = player._role_base._name
			--		d_f._brief._photo = player._role_base._photo
			--		d_f._brief._level = player._role_status._level
			--	end
			--end
			--消息方式
			local msg = NewMessage("UpdateRoleInfo")
			msg.id = role._roledata._base._id:ToStr()
			msg.name = role._roledata._base._name
			msg.photo = role._roledata._base._photo
			msg.level = role.roledata._status._level
			player:SendMessageToRole(f._brief._id, SerializeMessage(msg))
			fit:Next()
			f = fit:GetValue()
		end
		local resp = NewCommand("Role_Mon_Exp")
		resp.level = role._roledata._status._level
		resp.exp = role._roledata._status._exp:ToStr()
		resp.money = role._roledata._status._money
		resp.yuanbao = role._roledata._status._yuanbao
		resp.vp = role._roledata._status._vp
		player:SendToClient(SerializeCommand(resp))
	elseif arg.typ=="TestMessage4" then
		local msg = NewMessage("TestMessage4")
		player:SendMessage(role._roledata._base._id, SerializeMessage(msg))
	elseif arg.typ=="AddVP" then
		ROLE_Addvp(role, 120, 1)
	elseif arg.typ=="AddYuanBao" then
		ROLE_AddYuanBao(role, arg.count1*10)
		ROLE_AddChongZhi(role, arg.count1*10)
	elseif arg.typ=="ChangeTime" then
		API_SetSystemTime(arg.count1, arg.count2)
	elseif arg.typ=="AddInstance" then
		local ed = DataPool_Find("elementdata")
		local stage = ed:FindBy("stage_id", arg.count1)
		if stage == nil then
			return
		end
		local instance = role._roledata._status._instances
		local i = instance:Find(arg.count1)
		local first_flag = 0
		if i == nil then
			local value = CACHE.RoleInstance:new()
			value._tid = arg.count1
			value._score = 1
			value._star = 3
			instance:Insert(arg.count1, value)
			TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_STAR"], stage.chapterid, 3)
		else
			TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_STAR"], stage.chapterid, 3 - i._star)
			i._star = 3
		end
	
		local resp = NewCommand("GetInstance_Re")
		resp.info = {}

		local instance = role._roledata._status._instances
		local iit = instance:SeekToBegin()
		local i = iit:GetValue()
		while i ~= nil do
			local temp = {}
			temp.id = i._tid
			temp.star = i._star
			resp.info[#resp.info+1] = temp
			iit:Next()
			i = iit:GetValue()
		end
		resp.retcode = G_ERRCODE["SUCCESS"]
		player:SendToClient(SerializeCommand(resp))
	elseif arg.typ=="AddItem" then
		BACKPACK_AddItem(role, arg.count1, arg.count2)
	elseif arg.typ=="1" or arg.typ=="initrole1" then
		local ed = DataPool_Find("elementdata")
		
		local stage_one={1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015}
		local stage_two={2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015}
		local stage_three={3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015}
		
		role._roledata._status._money = 1000000
		role._roledata._status._level = 20
		role._roledata._status._yuanbao = 50000
		for j = 1,table.getn(stage_one) do
			local stage_id = stage_one[j]
			local stage = ed:FindBy("stage_id", stage_id)
			if stage == nil then
				return
			end
			local instance = role._roledata._status._instances
			local i = instance:Find(stage_id)
			local first_flag = 0
			if i == nil then
				local value = CACHE.RoleInstance:new()
				value._tid = stage_id
				value._score = 1
				value._star = 3
				instance:Insert(stage_id, value)
				TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_STAR"], stage.chapterid, 3)
			else
				TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_STAR"], stage.chapterid, 3 - i._star)
				i._star = 3
			end
		end
		local hero_id = {2,3,5,6}
		for i = 1,table.getn(hero_id) do
			local hero = ed:FindBy("hero_id", hero_id[i])
			local tmp_hero = CACHE.RoleHero:new()
			tmp_hero._tid = hero_id[i]
			tmp_hero._level = 1
			tmp_hero._order = hero.originalgrade
			tmp_hero._exp = 0
			role._roledata._hero_hall._heros:Insert(hero_id[i], tmp_hero)
		end
		player:KickoutSelf(1)
	elseif arg.typ=="2" or arg.typ=="initrole2" then
		local ed = DataPool_Find("elementdata")
	
		local stage_one={1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015}
		local stage_two={2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015}
		local stage_three={3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015}

		role._roledata._status._money = 1000000
		role._roledata._status._level = 40
		role._roledata._status._yuanbao = 50000
		
		for j = 1,table.getn(stage_one) do
			local stage_id = stage_one[j]
			local stage = ed:FindBy("stage_id", stage_id)
			if stage == nil then
				return
			end
			local instance = role._roledata._status._instances
			local i = instance:Find(stage_id)
			local first_flag = 0
			if i == nil then
				local value = CACHE.RoleInstance:new()
				value._tid = stage_id
				value._score = 1
				value._star = 3
				instance:Insert(stage_id, value)
				TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_STAR"], stage.chapterid, 3)
			else
				TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_STAR"], stage.chapterid, 3 - i._star)
				i._star = 3
			end
		end
		for j = 1,table.getn(stage_two) do
			local stage_id = stage_two[j]
			local stage = ed:FindBy("stage_id", stage_id)
			if stage == nil then
				return
			end
			local instance = role._roledata._status._instances
			local i = instance:Find(stage_id)
			local first_flag = 0
			if i == nil then
				local value = CACHE.RoleInstance:new()
				value._tid = stage_id
				value._score = 1
				value._star = 3
				instance:Insert(stage_id, value)
				TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_STAR"], stage.chapterid, 3)
			else
				TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_STAR"], stage.chapterid, 3 - i._star)
				i._star = 3
			end
		end
		local hero_id = {2,3,5,6}
		for i = 1,table.getn(hero_id) do
			local hero = ed:FindBy("hero_id", hero_id[i])
			local tmp_hero = CACHE.RoleHero:new()
			tmp_hero._tid = hero_id[i]
			tmp_hero._level = 1
			tmp_hero._order = hero.originalgrade
			tmp_hero._exp = 0
			role._roledata._hero_hall._heros:Insert(hero_id[i], tmp_hero)
		end
		player:KickoutSelf(1)
	elseif arg.typ=="3" or arg.typ=="initrole3" then
		local ed = DataPool_Find("elementdata")
		local stage_one={1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015}
		local stage_two={2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015}
		local stage_three={3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015}

		role._roledata._status._money = 1000000
		role._roledata._status._level = 60
		role._roledata._status._yuanbao = 50000
		
		for j = 1,table.getn(stage_one) do
			local stage_id = stage_one[j]
			local stage = ed:FindBy("stage_id", stage_id)
			if stage == nil then
				return
			end
			local instance = role._roledata._status._instances
			local i = instance:Find(stage_id)
			local first_flag = 0
			if i == nil then
				local value = CACHE.RoleInstance:new()
				value._tid = stage_id
				value._score = 1
				value._star = 3
				instance:Insert(stage_id, value)
				TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_STAR"], stage.chapterid, 3)
			else
				TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_STAR"], stage.chapterid, 3 - i._star)
				i._star = 3
			end
		end
		for j = 1,table.getn(stage_two) do
			local stage_id = stage_two[j]
			local stage = ed:FindBy("stage_id", stage_id)
			if stage == nil then
				return
			end
			local instance = role._roledata._status._instances
			local i = instance:Find(stage_id)
			local first_flag = 0
			if i == nil then
				local value = CACHE.RoleInstance:new()
				value._tid = stage_id
				value._score = 1
				value._star = 3
				instance:Insert(stage_id, value)
				TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_STAR"], stage.chapterid, 3)
			else
				TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_STAR"], stage.chapterid, 3 - i._star)
				i._star = 3
			end
		end
		for j = 1,table.getn(stage_three) do
			local stage_id = stage_three[j]
			local stage = ed:FindBy("stage_id", stage_id)
			if stage == nil then
				return
			end
			local instance = role._roledata._status._instances
			local i = instance:Find(stage_id)
			local first_flag = 0
			if i == nil then
				local value = CACHE.RoleInstance:new()
				value._tid = stage_id
				value._score = 1
				value._star = 3
				instance:Insert(stage_id, value)
				TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_STAR"], stage.chapterid, 3)
			else
				TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_STAR"], stage.chapterid, 3 - i._star)
				i._star = 3
			end
		end
		local hero_id = {2,3,5,6}
		for i = 1,table.getn(hero_id) do
			local hero = ed:FindBy("hero_id", hero_id[i])
			local tmp_hero = CACHE.RoleHero:new()
			tmp_hero._tid = hero_id[i]
			tmp_hero._level = 1
			tmp_hero._order = hero.originalgrade
			tmp_hero._exp = 0
			role._roledata._hero_hall._heros:Insert(hero_id[i], tmp_hero)
		end
		player:KickoutSelf(1)
	elseif arg.typ=="4" or arg.typ=="addheroexp" then
		HERO_AddExp(role, arg.count1, arg.count2)
	elseif arg.typ=="5" or arg.typ=="setlevel" then
		--level up
		role._roledata._status._level = arg.count1
		role._roledata._status._exp:Sub(role._roledata._status._exp)
		local resp = NewCommand("Role_Mon_Exp")
		resp.level = role._roledata._status._level
		resp.exp = role._roledata._status._exp:ToStr()
		resp.money = role._roledata._status._money
		resp.yuanbao = role._roledata._status._yuanbao
		resp.vp = role._roledata._status._vp
		player:SendToClient(SerializeCommand(resp))
	elseif arg.typ=="TestMessage1" then
		local msg = NewMessage("TestMessage1")
		for j = 1,1000 do
			player:SendMessage(role._roledata._base._id, SerializeMessage(msg))
		end
		--for r in DataPool_Array(DataPool("elementdata").role) do
		--	player:Log("OnCommand_DebugCommand, TestMessage1, id="..r.id.." purchasable="..r.purchasable)
		--end
	end
end
