
#ifndef __GNET_UDPC2SGAMEPROTOCOLS_HPP
#define __GNET_UDPC2SGAMEPROTOCOLS_HPP

#include "localdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "c2sgameprotocol"

namespace GNET
{

class UDPC2SGameProtocols : public GNET::Protocol
{
	#include "udpc2sgameprotocols"

	void Process(Manager *manager, Manager::Session::ID sid)
	{
		//GLog::log(LOG_INFO, "UDPC2SGameProtocols::Process, account=%.*s, index=%d, protocols.size()=%lu, index_ack=%d, sid=%u, thread=%u",
		//          (int)account.size(), (char*)account.begin(), index, protocols.size(), index_ack, sid, (unsigned int)pthread_self());

		StatisticManager::GetInstance().IncUDPCmdCount();

		Player *player = PlayerManager::GetInstance().FindByAccount(account);
		if(!player) return;

		//TODO: check sig

		Thread::Mutex::Scoped keeper(player->_lock);

		player->UpdateActiveTime();
		player->SetUDPTransSid(sid);

		player->FastSess_OnAck(index_ack);

		for(auto it=protocols.begin(); it!=protocols.end(); ++it)
		{
			int idx = index+(it-protocols.begin());
			if(idx-1>0 && !player->FastSess_IsReceived(idx-1)) return; //正常必然连续的，跳为对端异常
			if(player->FastSess_IsReceived(idx)) continue;
			player->FastSess_SetReceived(idx);
			GNET::Thread::Pool::_pool.AddSeqTask(player->GetHash()%100,
			                                     new CommandTask(player, it->data, it->extra_roles, it->extra_mafias, it->extra_pvps));
		}
		if(!protocols.empty()) player->FastSess_SendAck();
	}
};

};

#endif
