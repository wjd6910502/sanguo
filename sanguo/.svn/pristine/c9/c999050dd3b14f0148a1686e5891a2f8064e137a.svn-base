#include "miscmanager.h"
#include "gamedbclient.hpp"
#include "message.h"


extern std::map<Octets, Octets> g_save_data_map;
namespace CACHE
{

void MiscManager::BeginTransaction()
{
}

void MiscManager::CommitTransaction()
{
}

void MiscManager::CancelTransaction()
{
}

void MiscManager::Load(Octets &key, Octets &value)
{
	std::string str_key  = std::string((char*)key.begin(),key.size());

	Marshal::OctetsStream os(value);
	int db_version = 0;
	os >> db_version;
	os._dbversion = db_version;

	if(str_key == "mistmanager_hero_comments")
	{
		_hero_comments.unmarshal(os);
	}
	else if(str_key == "mistmanager_server_event")
	{
		_server_event.unmarshal(os);
	}
	else if(str_key == "mistmanager_open_server_time")
	{
		os >> _open_server_time;
	}
	else if(str_key == "mistmanager_pvp_season_end_time")
	{
		os >> _pvp_season_end_time;
	}
}

void MiscManager::Save()
{
	GNET::Marshal::OctetsStream value;
	std::string key_str = "mistmanager_hero_comments";

	int db_version = DB_VERSION;
	value << db_version;
	_hero_comments.marshal(value);
	g_save_data_map[Octets(key_str.c_str(), key_str.size())] = value;
	
	key_str = "mistmanager_server_event";
	value.clear();

	value << db_version;
	_server_event.marshal(value);
	g_save_data_map[Octets(key_str.c_str(), key_str.size())] = value;

	key_str = "mistmanager_open_server_time";
	value.clear();

	value << db_version;
	value << _open_server_time;
	g_save_data_map[Octets(key_str.c_str(), key_str.size())] = value;
	
	key_str = "mistmanager_pvp_season_end_time";
	value.clear();

	value << db_version;
	value << _pvp_season_end_time;
	g_save_data_map[Octets(key_str.c_str(), key_str.size())] = value;
}

void MiscManager::OnTimer(int tick, int now)
{
	if(tick%(SERVER_CONST_TICK_PER_SECOND*10) == 0)
	{
		char msg[100];
		snprintf(msg, sizeof(msg), "10028:");
		MessageManager::GetInstance().Put(0, 0, msg, 0);
	}
}

void MiscManager::SendMessage(const std::string& msg, int delay)
{
	MessageManager::GetInstance().Put(0, 0, msg.c_str(), delay);
}

}
