function OnCommand_WuZheShiLianFinishBattle(player, role, arg, others)
	player:Log("OnCommand_WuZheShiLianFinishBattle, "..DumpTable(arg).." "..DumpTable(others))

	if role._roledata._status._time_line ~= G_ROLE_STATE["WUZHESHILIAN"] then
		return
	end

	local resp = NewCommand("WuZheShiLianFinishBattle_Re")
	resp.retcode = G_ERRCODE["SUCCESS"]
	local hero_trial = role._roledata._wuzhe_shilian 
	
	--验证是否当前的难度关卡
	local curdifficulty = arg.difficulty
	local curstage = arg.stage
	if curdifficulty ~= hero_trial._cur_difficulty then
		--当前难度不正确
		resp.retcode = G_ERRCODE["TRIAL_ACTIVE_PARAM_DIFFICULTY_WRONG"] 
		player:SendToClient(SerializeCommand(resp))
		return
	end
	if hero_trial._cur_stage ~= curstage then
		--关卡没有开启
		resp.retcode = G_ERRCODE["TRIAL_ACTIVE_PARAM_STAGE_WRONG"]
		player:SendToClient(SerializeCommand(resp))
		return
	end	
	
	--检查武将信息
	for i = 1, table.getn(arg.hero) do
		local hero = arg.hero[i]
		--判断是否在英雄列表中
		local f = role._roledata._hero_hall._heros:Find(hero.id)
		if f == nil then	
			--武将不存在
			resp.restcode = G_ERRCODE["TRIAL_ACTIVE_PARAM_HERO_NOT_EXIST"]
			player:SendToClient(SerializeCommand(resp))
			return
		end		
		local s = hero_trial._dead_hero_info:Find(hero.id)
		if s ~= nil then
			--死亡英雄不可以上阵
			resp.retcode = G_ERRCODE["TRIAL_ACTIVE_PARAM_HERO_DEAD"]
			player:SendToClient(SerializeCommand(resp))
			return
		end	
	end

	--检查关卡信息
	local trialdifficultyinfo  = hero_trial._attack_info:Find(curdifficulty)			
	if trialdifficultyinfo ~= nil then
		local trialstageinfo = trialdifficultyinfo._difficulty_attackinfo:Find(hero_trial._cur_stage)
		if trialstageinfo ~= nil then
			if trialstageinfo._alive_flag == 0 or trialstageinfo._reward_flag == 2 then					
				resp.retcode = G_ERRCODE["TRIAL_ACTIVE_STAGE_HAS_FIGHTED"]
				player:SendToClient(SerializeCommand(resp)) 
				return
			end

			if trialstageinfo._stage ~= hero_trial._cur_stage then
				resp.retcode = G_ERRCODE["TRIAL_ACTIVE_STAGE_NOT_MATCH"]
				player:SendToClient(SerializeCommand(resp))
				return
			end
		else
			resp.retcode =  G_ERRCODE["TRIAL_ACTIVE_STAGE_NOT_FOUND"]
			player:SendToClient(SerializeCommand(resp))
			return
		end
	else
		 resp.retcode = G_ERRCODE["TRIAL_ACTIVE_DIFFICULTY_NOT_FOUND"]
		 player:SendToClient(SerializeCommand(resp))
		return
	end

	--检查武将信息
	for i = 1, table.getn(arg.hero) do
		local hero = arg.hero[i]
		--关卡结束英雄数据修改
		local f = hero_trial._injured_hero_info:Find(hero.id)
		if f ~= nil then
			f._hp = hero.hp
			f._anger = hero.anger
			if f._hp == 0 then
				--插入死亡数据 删除受伤数据
				hero_trial._injured_hero_info:Delete(hero.id)
		 		
				local deadhero = CACHE.Int()
				deadhero._value = hero.id
				hero_trial._dead_hero_info:Insert(hero.id,deadhero)
			end
		else
			if hero.hp == 0 then
				local deadhero = CACHE.Int()
				deadhero._value = hero.id
				hero_trial._dead_hero_info:Insert(hero.id,deadhero)
			else
				local trialhero = CACHE.ShiLianHeroInfo()
				trialhero._id  = hero.id
				trialhero._hp  = hero.hp
				trialhero._anger  = hero.anger
				hero_trial._injured_hero_info:Insert(hero.id,trialhero)
			end

		end
	end

	--挑战失败
	local trialdifficultyinfo  = hero_trial._attack_info:Find(curdifficulty)			
	local trialstageinfo = trialdifficultyinfo._difficulty_attackinfo:Find(hero_trial._cur_stage)	
	local bossid = trialstageinfo._id	
	if arg.opponent.hp ~= 0 or arg.winflag == 0 then
		trialstageinfo._alive_flag = 1 
		trialstageinfo._hp = arg.opponent.hp
		trialstageinfo._anger = arg.opponent.anger
		trialstageinfo._reward_flag = 0
		resp.retcode = G_ERRCODE["TRIAL_ACTIVE_FAILED"] 
		player:SendToClient(SerializeCommand(resp))
		return
	else
		
		trialstageinfo._alive_flag = 0
		--trialstageinfo._hp = arg.opponent.hp
		--trialstageinfo._anger = arg.opponent.anger	 
		if trialstageinfo._reward_flag == 0 then
			trialstageinfo._reward_flag = 1
		end
	end
	
	local all_dead = true
	local trialstageinfo_it = trialdifficultyinfo._difficulty_attackinfo:SeekToBegin()
	local trialstageinfo = trialstageinfo_it:GetValue()
	while trialstageinfo ~= nil do
		if trialstageinfo._alive_flag == 1 then
			all_dead = false
			break
		end
		trialstageinfo_it:Next()
		trialstageinfo = trialstageinfo_it:GetValue()
	end

	if all_dead == true then
		--计算最大通关难度
		if hero_trial._high_difficulty < 5 then
			if hero_trial._cur_difficulty > hero_trial._high_difficulty then
				hero_trial._high_difficulty = hero_trial._cur_difficulty
			end	
		end
	
		--通关难度关卡计算
		if hero_trial._cur_difficulty == hero_trial._high_difficulty then			
			--hero_trial._cur_difficulty = hero_trial._cur_difficulty + 1		
			--if hero_trial._cur_difficulty > 5 then
			--	hero_trial._cur_difficulty = 5
			--end
			--hero_trial._cur_difficulty = 0 
		end
	end
	
	--获取宿主英雄标志
	local ed = DataPool_Find("elementdata")
	local boss_infos = ed:FindBy("boss_id", bossid)
	local suzhu_flag = 0	
	
	if boss_infos ~= nil then
		local num_id = {}
		num_id[#num_id+1] = boss_infos.sudi_role1
		num_id[#num_id+1] = boss_infos.sudi_role2 
		num_id[#num_id+1] = boss_infos.sudi_role3
		
		--添加宿主武将奖励 a*100+b*10+c
		for i =1,#num_id do
			suzhu_flag = suzhu_flag*10
			for j = 1 ,#arg.hero  do
				if arg.hero[j].id == num_id[i] then
					suzhu_flag = suzhu_flag + i
				end
			end
		end
	else
		player:Log("OnCommand_WuZheShiLianGetReward, bossid = "..arg.opponent.id.." NOT FIND")
		resp.retcode = G_ERRCODE["TRIAL_ACTIVE_BOSSID_NOT_FIND"] 
		player:SendToClient(SerializeCommand(resp))
		return
	end
	
	local trialdifficultyinfo  = hero_trial._attack_info:Find(curdifficulty)			
	local trialstageinfo = trialdifficultyinfo._difficulty_attackinfo:Find(hero_trial._cur_stage)		
	trialstageinfo._suzhu_flag = suzhu_flag

	player:SendToClient(SerializeCommand(resp))
	
	--查看操作和种子，准备做后面的验证
	--arg.operations
	--role._roledata._status._fight_seed
	--设置成就
	TASK_ChangeCondition(role, G_ACH_TYPE["STAGE_COUNT"], G_ACH_EIGHT_TYPE["WUZHESHILIAN"] , 1)
	role._roledata._status._time_line = G_ROLE_STATE["FREE"]

end
