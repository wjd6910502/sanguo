#ifndef _MESSAGE_H_
#define _MESSAGE_H_

#include <string>
#include <vector>
#include <list>
#include "thread.h"
#include "mutex.h"
#include "statistic_manager.h"

struct Message
{
	int64_t _target;
	int64_t _src; //TODO:
	std::string _data;
	std::vector<int64_t> _extra_roles;
	std::vector<int64_t> _extra_mafias;
	std::vector<int> _extra_pvps;

	Message(int64_t target, int64_t src, const std::string& data, const std::vector<int64_t> *extra_roles, const std::vector<int64_t> *extra_mafias, const std::vector<int> *extra_pvps)
	       : _target(target), _src(src), _data(data)
	{
		if(extra_roles) _extra_roles = *extra_roles;
		if(extra_mafias) _extra_mafias = *extra_mafias;
		if(extra_pvps) _extra_pvps = *extra_pvps;
	}
};

class MessageManager
{
	std::list<Message> _msgs;

	GNET::Thread::Mutex _lock;

	MessageManager() {}

public:
	static MessageManager& GetInstance()
	{
		static MessageManager _instance;
		return _instance;
	}

	void OnTimer(int tick, time_t now);

	inline void Put(int64_t target, int64_t src, const std::string& data, const std::vector<int64_t> *extra_roles=0,
	         const std::vector<int64_t> *extra_mafias=0, const std::vector<int> *extra_pvps=0)
	{
		StatisticManager::GetInstance().IncMsgPutCount();

		GNET::Thread::Mutex::Scoped keeper(_lock);
		_msgs.push_back(Message(target, src, data, extra_roles, extra_mafias, extra_pvps));
	}
	inline void Put(const Message& msg)
	{
		StatisticManager::GetInstance().IncMsgPutCount();

		GNET::Thread::Mutex::Scoped keeper(_lock);
		_msgs.push_back(msg);
	}
};

#endif //_MESSAGE_H_

