$#include "playermanager.h"
$#include "topmanager.h"
$#include "mafiamanager.h"
$#include "pvpmanager.h"

$#include "forlua.h"
$#include "structs.h"

$using namespace CACHE;

namespace CACHE
{

class Int64
{
	Int64(): _v(0), _s("0") {}
	Int64(const char *s);

	const char* ToStr() const { return _s.c_str(); }
};

$$$REPLACE ME!$$$

class Role
{
public:
	RoleBase _base;
	RoleStatus _status;
	RoleHeroHall _hero_hall;
	RoleBackPack _backpack;
	RoleFriend _friend;
	RoleChat _chat;
	RoleMafia _mafia;
	RolePVP _pvp;

	void SendToClient(const std::string& v);
	void SendUDPToClient(const std::string& v);
	void FastSess_Reset();
	void FastSess_Send(const std::string& v);
	void FastSess_OnAck(int index_ack);
	bool FastSess_IsReceived(int index) const;
	void FastSess_SetReceived(int index);
	void FastSess_SendAck();
	void FastSess_TriggerSend();
};

class Player
{
public:
	void Log(const char *v) const;
	void Err(const char *v) const;
	void SendToClient(const std::string& v);
	void SendUDPToClient(const std::string& v);
	void SendMessage(const Int64& target, const std::string& v);
	void SendMessage(const Int64& target, const std::string& v, const Int64List& extra_roles, const Int64List& extra_mafias, const IntList& extra_pvps);
	void SendMessageToAllRole(const std::string& v);
	void SendMessageToAllRole(const std::string& v, const Int64List& extra_roles, const Int64List& extra_mafias, const IntList& extra_pvps);
	void Kickout(int reason);
	bool HaveRole() const { return _role_id!=0; }
	void CreateRole(const char *name, int photo);
	bool IsCreatingRole() const { return (_role_id==0 && !_role_name.empty()); }
	bool HaveMafia() const { return _role._mafia._id!=0; }
	void CreateMafia(const char *name, int flag);
	bool IsCreatingMafia() const { return ((int64_t)_role._mafia._id==0 && !_l_mafia_name.empty()); }
	bool NetTime_NeedSync() const { return _network_time.NeedSync(); }
	void NetTime_Sync2Client();

	static bool IsValidRoleName(const char *name);
	static bool IsValidMafiaName(const char *name);
};

class RoleIter
{
public:
	void Next();
	Role* GetValue();
};

class PlayerManager
{
public:
	static PlayerManager& GetInstance()

	int Size() const { return _map_by_role_id.size(); }

	Role* Find(const Int64& k);

	RoleIter SeekToBegin() const { return RoleIter(_map_by_role_id.begin(), this, _tag); }
	RoleIter Seek(const Int64& k) const { return RoleIter(_map_by_role_id.find(k), this, _tag); }
};

class Mafia
{
public:
	Int64 _id;
	std::string _name;
	int _flag;
	std::string _announce;
	int _level;
	int _activity;
	Int64 _boss_id;
	std::string _boss_name;
	MafiaMemberMap _member_map;

	Mafia(): _flag(0), _level(0), _activity(0), _in_transaction(false) {}
};

class MafiaMapIter
{
public:
	void Next() { _rep.Next(); }
	Mafia* GetValue() { return _rep.GetValue(); }
};

class MafiaMap
{
public:
	MafiaMap(): _rep(this) {}

	int Size() const { return _rep.Size(); }

	Mafia* Find(const Int64& k) { return _rep.Find(k); }
	//void Insert(const Int64& k, const Mafia& v) { _rep.Insert(k, v); }
	//void Delete(const Int64& k) { _rep.Delete(k); }
	//void Clear() { _rep.Clear(); }

	MafiaMapIter SeekToBegin() const { return _rep.SeekToBegin(); }
	MafiaMapIter Seek(const Int64& k) const { return _rep.Seek(k); }
	MafiaMapIter SeekToLast() const { return _rep.SeekToLast(); }
};

class MafiaManager
{
public:
	static MafiaManager& GetInstance();
	MafiaMap& GetMap() { return _map; } //_map尽在big锁状态下才会传给lua，此时系统处于单线程模式，无所谓锁不锁
};

class PVP
{
public:
	int _id;
	int _status;
	PVPFighter _fighter1;
	PVPFighter _fighter2;
	int _fight_start_time; //s
	int _next_client_tick;
	int _latency; //ms
	int _going_to_end;
};

//class TopListData
//{
//public:
//	Int64 _id;
//	std::string _name;
//	int _photo;
//	Int64 data;
//
//	TopListData(): _photo(0) {}
//};
//
//class TopListMapIter
//{
//public:
//	void Next() {_rep.Next(); }
//	TopListData *GetValue() {return _rep.GetValue(); }
//
//};
//
//class TopListMap
//{
//public:
//	TopListMap() {}
//
//	int Size() const { return _rep.Size(); }
//
//	TopListData* Find(const Int64& k) { return _rep.Find(k); }
//	void Insert(const Int64& k, const TopListData & v) { _rep.Insert(k, v); }
//	void Delete(const Int64& k) { _rep.Delete(k); }
//
//	TopListMapIter SeekToBegin() { return _rep.SeekToBegin(); }
//	TopListMapIter Seek(const Int64& k) { return _rep.Seek(k); }
//	TopListMapIter SeekToLast() { return _rep.SeekToLast(); }
//};
//
//class TopListMultiMapIter
//{
//public:
//	void Next() {_rep.Next(); }
//	TopListData *GetValue() {return _rep.GetValue(); }
//
//};
//
//class TopListMultiMap
//{
//public:
//	TopListMultiMap() {}
//
//	int Size() const { return _rep.Size(); }
//
//	TopListData* Find(const Int64& k) { return _rep.Find(k); }
//	void Insert(const Int64& k, const TopListData & v) { _rep.Insert(k, v); }
//	void Delete(const Int64& k) { _rep.Delete(k); }
//	void Delete(TopListMultiMapIter &iter) { _rep.Delete(iter);}
//
//	TopListMultiMapIter SeekToBegin() { return _rep.SeekToBegin(); }
//	TopListMultiMapIter Seek(const Int64& k) { return _rep.Seek(k); }
//	TopListMultiMapIter SeekToLast() { return _rep.SeekToLast(); }
//};
//
//class TopList
//{
//public:
//	TopListMap _new_top_list_by_id; //这个榜是一个实时榜，并且也是自己这个榜的cache
//	TopListMultiMap _new_top_list_by_data; 
//	TopListMultiMap _old_top_list; //这个榜是老榜
//};
//
//class TopManagerMapIter
//{
//public:
//	void Next() {_rep.Next(); }
//
//	TopList *GetValue() {return _rep.GetValue(); }
//
//};
//
//class TopManagerMap
//{
//public:
//	TopManagerMap() {}
//
//	int Size() const { return _rep.Size(); }
//
//	TopList* Find(const int& k) { return _rep.Find(k); }
//	void Insert(const int& k, const TopList & v) { _rep.Insert(k, v); }
//	void Delete(const int& k) { _rep.Delete(k); }
//
//	TopManagerMapIter SeekToBegin() { return _rep.SeekToBegin(); }
//	TopManagerMapIter Seek(const int& k) { return _rep.Seek(k); }
//	TopManagerMapIter SeekToLast() { return _rep.SeekToLast(); }
//};
//
//class TopManager
//{
//public:
//	//for lua
//	int Size() const;
//
//	Mafia* Find(const int& k);
//	//void Insert(const Int64& k, const TopList& v);
//	//void Delete(const int& k);
//
//	TopManagerMapIter SeekToBegin();
//	TopManagerMapIter Seek(const int& k);
//};

};

inline CACHE::Player* API_GetLuaPlayer(void *p) { return (CACHE::Player*)p; }
inline CACHE::Role* API_GetLuaRole(void *p) { return (p ? &(((CACHE::Player*)p)->_role) : 0); }
inline CACHE::Mafia* API_GetLuaMafia(void *r) { return (CACHE::Mafia*)r; }
inline int API_PVP_Create(const CACHE::Int64& fighter1, const CACHE::Int64& fighter2) { return CACHE::PVPManager::GetInstance().LUA_Create(fighter1, fighter2); }
inline void API_PVP_Delete(int id) { return CACHE::PVPManager::GetInstance().LUA_Delete(id); }
inline CACHE::PVP* API_GetLuaPVP(void *r) { return (CACHE::PVP*)r; }
inline CACHE::TopManager* API_GetLuaTopManager(void *r) { return (CACHE::TopManager*)r; }

