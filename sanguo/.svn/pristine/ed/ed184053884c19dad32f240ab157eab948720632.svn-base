function OnCommand_WuZheShiLianSelectDifficulty(player, role, arg, others)
	player:Log("OnCommand_WuZheShiLianSelectDifficulty, "..DumpTable(arg).." "..DumpTable(others))
		
	local resp = NewCommand("WuZheShiLianSelectDifficulty_Re")
	resp.retcode = G_ERRCODE["SUCCESS"]
	
	-- 难度定义 1-低  2-中 3-高  4-极高 5-暴怒 
	local difficulty = arg.difficulty

	--这里主要验证传入参数是否正确就可以
	local hero_trial = role._roledata._wuzhe_shilian	

	--这里需要明确_high_difficulty代表的含义，
	--如果_high_difficulty代表的是当前打过的最高难度，那么这么写是存在问题的。
	--如果代表的是当前可以打得最高难度，那么这么写是没有问题的，但是要保证所有的地方，这个变量的含义一致
	if difficulty < 1 or difficulty > hero_trial._high_difficulty then
		--关卡尚未开启
		resp.retcode = G_ERRCODE["TRIAL_ACTIVE_DIFFICULTY_LOCK"] 
		player:SendToClient(SerializeCommand(resp))
		return
	end
		
	--已经有难度
	--这里只要这个当前难度不是0，其实客户端发这个协议都是有问题的。
	--现在这么写不会造成问题。但是其实是没有任何的意义的
	if hero_trial._cur_difficulty ~= 0 and hero_trial._cur_difficulty ~= difficulty then
		resp.retcode = G_ERRCODE["TRIAL_ACTIVE_DIFFICULTY_LOCK"]
		player:SendToClient(SerializeCommand(resp))
		return
	else
		hero_trial._cur_difficulty = difficulty
	end
	
	resp.cur_diffculty = hero_trial._cur_difficulty

	--不明白你这是要计算什么。当前进攻的关卡这个不是应该客户端在join的时候来进行的设置吗？
	--现在你在这里计算什么？计算的意义是什么？
	hero_trial._cur_stage = 9
	--当前关卡计算
	local f = hero_trial._attack_info:Find(difficulty)
	if f ~= nil then
		local sit = f._difficulty_attackinfo:SeekToBegin()
		local s = sit:GetValue()
		while s ~= nil do	
			if s._alive_flag == 1 and s._stage < hero_trial._cur_stage then
				hero_trial._cur_stage = s._stage					
			end
			sit:Next()
			s = sit:GetValue()
		end
	end
	
	--代表当前难度都已经通关
	player:SendToClient(SerializeCommand(resp))

end
