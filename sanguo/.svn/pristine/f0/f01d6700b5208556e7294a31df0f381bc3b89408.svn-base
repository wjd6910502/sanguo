
#include "udptransclient.hpp"
#include "state.hxx"

#include "connection.h"

namespace GNET
{

UDPTransClient UDPTransClient::instance;

const Protocol::Manager::Session::State* UDPTransClient::GetInitState() const
{
	return &state_UDPTransClient;
}

void UDPTransClient::OnAddSession(Session::ID sid)
{
	fprintf(stderr, "UDPTransClient::OnAddSession, this->sid=%d, sid=%d\n", this->sid, sid);

	Thread::Mutex::Scoped l(locker_state);

	//可以中途改变目标地址
	//if (conn_state)
	//{
	//	Close(sid);
	//	return;
	//}
	conn_state = true;
	this->sid = sid;
}

void UDPTransClient::OnDelSession(Session::ID sid)
{
	fprintf(stderr, "UDPTransClient::OnDelSession, this->sid=%d, sid=%d\n", this->sid, sid);

	Thread::Mutex::Scoped l(locker_state);

	if(!conn_state || this->sid!=sid) return;
	conn_state = false;
}

void UDPTransClient::OnAbortSession(const SockAddr &sa)
{
	//Thread::Mutex::Scoped l(locker_state);
	//conn_state = false;
}

void UDPTransClient::OnCheckAddress(SockAddr &sa) const
{
}

bool UDPTransClient::LoadSessionConfig(GNET::NetSession::Config &cnf)
{
	if(!GNET::Protocol::Manager::LoadSessionConfig(cnf)) return false;
	cnf.address = Connection::GetInstance().GetUDPTransIP();
	cnf.port = Connection::GetInstance().GetUDPTransPort();
	return true;
}

//void UDPTransClient::SendTo(const char *dest_ip, unsigned short dest_port, const Protocol& protocol)
//{
//	//int fd = ((PollIO*)_assoc_passiveio)->GetFD();
//
//	//Marshal::OctetsStream os;
//	//protocol.Encode(os);
//
//	//sockaddr_in dest_addr;
//	//memset(&dest_addr, 0, sizeof(dest_addr));
//	//dest_addr.sin_family = AF_INET;
//	//dest_addr.sin_addr.s_addr = inet_addr(dest_ip);
//	//dest_addr.sin_port = htons(dest_port);
//
//	//sendto(fd, os.begin(), os.size(), 0, (const struct sockaddr*)&dest_addr, sizeof(dest_addr));
//}
//
//void UDPTransClient::SendTo(const SockAddr dest, const Protocol& protocol)
//{
//	//int fd = ((PollIO*)_assoc_passiveio)->GetFD();
//	NetSession *sess = GetSession(sid);
//	int fd = sess->_assoc_io->GetFD();
//
//	Marshal::OctetsStream os;
//	protocol.Encode(os);
//
//	//sendto(fd, os.begin(), os.size(), 0, (const struct sockaddr*)dest, sizeof(sockaddr_in));
//}

};
