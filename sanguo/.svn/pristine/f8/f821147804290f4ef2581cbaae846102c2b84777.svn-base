function OnCommand_WuZheShiLianJoinBattle(player, role, arg, others)
	player:Log("OnCommand_WuZheShiLianJoinBattle, "..DumpTable(arg).." "..DumpTable(others))
	
	local resp = NewCommand("WuZheShiLianJoinBattle_Re")
	resp.retcode = G_ERRCODE["SUCCESS"]

	local hero_trial = role._roledata._wuzhe_shilian 
	
	--需要验证当前难度的关卡信息是否开启	
	if arg.difficulty ~= hero_trial._cur_difficulty then
		--当前难度不正确
		resp.retcode = G_ERRCODE["TRIAL_ACTIVE_PARAM_DIFFICULTY_WRONG"] 
		player:SendToClient(SerializeCommand(resp))
		return
	end
	
	--验证关卡数据对不对
	hero_trial._cur_stage = arg.difficulty*8 + 1
	local f = hero_trial._attack_info:Find(arg.difficulty)
	if f ~= nil then
		local sit = f._difficulty_attackinfo:SeekToBegin()
		local s = sit:GetValue()
		while s ~= nil do	
			if s._alive_flag == 1 and s._stage < hero_trial._cur_stage then
				hero_trial._cur_stage = s._stage					
			end
			sit:Next()
			s = sit:GetValue()
		end
	end	
	if arg.stage < 1 or arg.stage > arg.difficulty*8 or hero_trial._cur_stage ~= arg.stage then
		resp.retcode = G_ERRCODE["TRIAL_ACTIVE_PARAM_STAGE_WRONG"]
		player:SendToClient(SerializeCommand(resp))
		return 
	end

	for i = 1, #arg.heros do
		local hero_id  = arg.heros[i]
		--判断是否在英雄列表中
		local f = role._roledata._hero_hall._heros:Find(hero_id)
		if f == nil then	
			--武将不存在
			resp.restcode = G_ERRCODE["TRIAL_ACTIVE_PARAM_HERO_NOT_EXIST"]
			player:SendToClient(SerializeCommand(resp))	
			return
		end
		
		local s = hero_trial._dead_hero_info:Find(hero_id)
		if s ~= nil then
			--死亡英雄不可以上阵
			resp.retcode = G_ERRCODE["TRIAL_ACTIVE_PARAM_HERO_DEAD"] 
			player:SendToClient(SerializeCommand(resp))
			return
		end		
	end
	
	player:SendToClient(SerializeCommand(resp))

end
