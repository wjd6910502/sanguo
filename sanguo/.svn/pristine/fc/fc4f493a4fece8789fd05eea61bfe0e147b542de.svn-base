
#include "laohuinformclient.hpp"
#include "state.hxx"
#include "laohu_pay.hpp"
#include <map>
namespace GNET
{

LaohuInformClient LaohuInformClient::instance;

const Protocol::Manager::Session::State* LaohuInformClient::GetInitState() const
{
	return &state_LaohuInformClient;
}

void LaohuInformClient::OnAddSession(Session::ID sid)
{
	Thread::Mutex::Scoped l(locker_state);
	if (conn_state)
	{
		Close(sid);
		return;
	}
	conn_state = true;
	this->sid = sid;
	
	
	//这里发送协议并且获取环境变量 支持get 和post 方式 用cgi方式 		
	std::string env_param = getenv("QUERY_STRING"); 	
	
	env_param = "account=111&order=11100022&amount=1000&ext=199&zoneid=13";
	std::map<std::string,std::string> query_map;
	ParseString(env_param,query_map);

	//TODO: 加一条log日志

	Laohu_Pay command;
	std::string& act = query_map["account"];
	command.account = Octets(act.c_str(),act.size());

	std::string& order =query_map["order"];
	command.order = Octets(order.c_str(),order.size());

	command.amount = atoi((query_map["amount"]).c_str());
	
	std::string& ext = query_map["ext"]; 
	command.ext = Octets(ext.c_str(),ext.size());

	command.zoneid = atoi(query_map["zoneid"].c_str());
	
	std::cout<<"account ="<<query_map["account"]<<" order ="<<query_map["order"]<<" ext="<<query_map["ext"]<<" zoneid = "<<query_map["zoneid"]<<std::endl;

	if( LaohuInformClient::GetInstance()->SendProtocol(&command) )
	{
		std::cout<<"发送成功"<<std::endl;	
	}
	else
	{
		std::cout<<"发送失败"<<std::endl;
	}

}

void LaohuInformClient::OnDelSession(Session::ID sid)
{
	Thread::Mutex::Scoped l(locker_state);
	conn_state = false;
}

void LaohuInformClient::OnAbortSession(const SockAddr &sa)
{
	Thread::Mutex::Scoped l(locker_state);
	conn_state = false;
}

void LaohuInformClient::OnCheckAddress(SockAddr &sa) const
{
}

void LaohuInformClient::ParseString(std::string& src, std::map<std::string,std::string>& _query_map)
{
	const char *p = src.c_str();
	while (p)
	{	
		if(*p == '&')
			p++;
		const char *q = strchr(p, '=');
		if (!q) return; //Err
		const char *r = strchr(p, '&');
		if (r && r<q) return; //Err
		std::string n(p, q-p);
		q++;
		std::string v(q, r ? (r-q) : strlen(q));
		//这里没考虑n，v编码问题  _query_map[HttpProtocol::UrlDecode(n)] = HttpProtocol::UrlDecode(v);
		_query_map[n] = v;
		p = r;
	}        
	
}

};
