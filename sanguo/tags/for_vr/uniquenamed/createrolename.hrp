
#ifndef __GNET_CREATEROLENAME_HPP
#define __GNET_CREATEROLENAME_HPP

#include "localdefs.h"
#include "callid.hxx"
#include "state.hxx"

#include "createrolenamearg"
#include "createrolenameres"

#include "leveldb.h"
#include "write_batch.h"
using namespace GNET;

extern leveldb::DB* g_db;

namespace GNET
{

class CreateRoleName : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "createrolename"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		CreateRoleNameArg *arg = (CreateRoleNameArg *)argument;
		CreateRoleNameRes *res = (CreateRoleNameRes *)result;

		std::string find_key = std::string((char*)arg->name.begin(), arg->name.size());
		std::string value;
		leveldb::Status status = g_db->Get(leveldb::ReadOptions(),find_key,&value);

		if(!status.ok())
		{
			leveldb::WriteBatch batch;
			std::string key = find_key;
			value = "1";
			batch.Put(key, value);
			leveldb::Status s = g_db->Write(leveldb::WriteOptions(), &batch);
			
			if(!s.ok())
			{
				//¼ÇÂ¼´íÎóÈÕÖ¾
				res->retcode = 2;
			}
			else
			{
				res->retcode = 0;
			}
		}
		else
		{
			res->retcode = 1;
		}
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// CreateRoleNameArg *arg = (CreateRoleNameArg *)argument;
		// CreateRoleNameRes *res = (CreateRoleNameRes *)result;
	}

	void OnTimeout(Rpc::Data *argument)
	{
	}

};

};
#endif
