
#ifndef __GNET_STUNGETSERVERINFO_HPP
#define __GNET_STUNGETSERVERINFO_HPP

#include "localdefs.h"
#include "callid.hxx"
#include "state.hxx"
#include "glog.h"

#include "stungetserverinfoarg"
#include "stungetserverinfores"
#include "stungameclient.hpp"

namespace GNET
{

class STUNGetServerInfo : public Rpc
{
#define	RPC_BASECLASS	Rpc
	#include "stungetserverinfo"
#undef	RPC_BASECLASS

	void Server(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		// STUNGetServerInfoArg *arg = (STUNGetServerInfoArg *)argument;
		// STUNGetServerInfoRes *res = (STUNGetServerInfoRes *)result;
	}

	void Client(Rpc::Data *argument, Rpc::Data *result, Manager *manager, Manager::Session::ID sid)
	{
		//STUNGetServerInfoArg *arg = (STUNGetServerInfoArg *)argument;
		STUNGetServerInfoRes *res = (STUNGetServerInfoRes *)result;

		GLog::log(LOG_INFO, "GAMED::STUNGetServerInfo::Client, retcode=%d, public_ip=%.*s, public_port=%d",
		          res->retcode, (int)res->public_ip.size(), (char*)res->public_ip.begin(), res->public_port);

		if(res->retcode)
		{
			GLog::log(LOG_ERR, "GAMED::STUNGetServerInfo::Client, retcode=%d, public_ip=%.*s, public_port=%d",
			          res->retcode, (int)res->public_ip.size(), (char*)res->public_ip.begin(), res->public_port);
			return;
		}

		std::string s((char*)res->public_ip.begin(), res->public_ip.size());
		STUNGameClient::GetInstance()->SetStundPublicAddress(s.c_str());
		STUNGameClient::GetInstance()->SetStundPublicPort(res->public_port);
	}

	void OnTimeout(Rpc::Data *argument)
	{
		STUNGetServerInfoArg *arg = (STUNGetServerInfoArg *)argument;

		GLog::log(LOG_ERR, "GAMED::STUNGetServerInfo::OnTimeout, zoneid=%d", arg->zoneid);

		//опиб
		STUNGetServerInfo *rpc = (STUNGetServerInfo*)Rpc::Call(RPC_STUNGETSERVERINFO, *arg);
		STUNGameClient::GetInstance()->SendProtocol(rpc);
	}

};

};
#endif
